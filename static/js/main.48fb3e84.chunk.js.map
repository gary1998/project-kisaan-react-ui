{"version":3,"sources":["Store.js","localStorage.js","Reducer.js","Actions.js","components/AppLayout.js","pages/Splash.js","components/Card.js","pages/Dashboard.js","pages/Chat.js","pages/FAQ.js","pages/Recovery.js","pages/Configure.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","state","action","type","busy","location","payload","console","log","user","setItem","href","fields","crops","concat","filter","field","fieldResId","crop","cropId","serverURL","apiURL","setBusy","a","resp","getLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","loginUser","email","password","variables","fetch","method","headers","body","stringify","query","then","data","json","login","catch","logoutUser","getFields","getCrops","newCrop","owner","name","cropResId","createCrop","newField","addFieldToAgro","id","geo_json","features","properties","createField","deleteField","deleteFieldFromAgro","removeField","deleteCrop","removeCrop","fieldData","Promise","resolve","reject","ok","statusText","fieldId","alert","response","AppLayout","sideNav","profileModalShow","_handleLogout","props","logout","className","aria-label","onClick","setState","isActive","this","prefix","Modal","open","primaryButtonText","secondaryButtonText","onRequestClose","onRequestSubmit","onSecondarySubmit","Loading","active","style","textAlign","alt","src","photo","width","height","TextInput","disabled","labelText","light","value","to","isRail","defaultExpanded","expanded","renderIcon","Home20","Forum20","Data_220","Dashboard20","Help20","children","React","Component","connect","dispatch","Splash","loginModalShow","_handleLoginSubmit","_handleEmailChange","evt","target","_handlePasswordChange","Button","maxWidth","Login20","placeholder","onChange","Card","Tile","header","footer","Dashboard","Row","Column","Chat","FAQ","Recovery","cropsDetails","require","TableContainer","DataTable","Table","TableHead","TableRow","TableBody","TableCell","TableHeader","Configure","selectedCrop","fieldGeoJSON","fieldName","Math","random","toString","substring","_handleChangeCropSelection","_handleAddCrop","addCrop","_handleAddField","addField","provider","osm","x","y","z","s","String","fromCharCode","wikimedia","dpr","stamen","_handleMapBoundChange","ne","bounds","sw","nw","se","format","retrieveLocation","retrieveCrops","retrieveFields","Grid","withOverlay","sm","lg","center","animate","zoom","onBoundsChanged","Add20","title","key","length","map","seperator","lastIndexOf","pt1","geometry","coordinates","pt2","kind","tabIndex","hasonlyicon","TrashCan20","iconDescription","colspan","Form","Select","helperText","inline","defaultValue","SelectItem","text","last","Content","App","exact","path","render","Boolean","hostname","match","subscribe","saveState","getState","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2/HAMMA,GADqC,kBAAXC,QAAuBA,OAAOC,qCAAuCD,OAAOC,qCAAqC,IAAMC,KAErJC,YAAgBC,MAEZC,ECTmB,WACrB,IACI,IAAMC,EAAkBC,aAAaC,QAAQ,sBAC7C,GAAuB,OAApBF,EACC,OAEJ,OAAOG,KAAKC,MAAMJ,GACpB,MAAMK,GACJ,QDCeC,IAAe,GAGvBC,EAFDC,aEVS,SAACC,EAAOC,GAC3B,OAAOA,EAAOC,MACV,IAAK,WACD,OAAO,2BACAF,GADP,IAEIG,MAAM,IAGd,IAAK,qBACD,OAAO,2BACAH,GADP,IAEII,SAAUH,EAAOI,QACjBF,MAAM,IAGd,IAAK,yBAED,OADAG,QAAQC,IAAI,uCACL,2BACAP,GADP,IAEIG,MAAM,IAGd,IAAK,eAED,OADAG,QAAQC,IAAI,4DACL,2BACAP,GADP,IAEIG,MAAM,EACNK,KAAM,KAGd,IAAK,gBACD,OAAO,2BACAR,GADP,IAEIG,MAAM,EACNK,KAAMP,EAAOI,UAGrB,IAAK,SAGD,OAFAb,aAAaiB,QAAQ,qBAAsB,IAC3CxB,OAAOmB,SAASM,KAAK,QACd,2BACAV,GADP,IAEIG,MAAM,EACNK,KAAM,KAGd,IAAK,2BACD,OAAO,2BACAR,GADP,IAEIG,MAAM,EACNQ,OAAQV,EAAOI,UAGvB,IAAK,0BACD,OAAO,2BACAL,GADP,IAEIG,MAAM,IAGd,IAAK,0BACD,OAAO,2BACAH,GADP,IAEIG,MAAM,EACNS,MAAOX,EAAOI,UAGtB,IAAK,yBACD,OAAO,2BACAL,GADP,IAEIG,MAAM,IAGd,IAAK,oBACD,IAAIQ,EAASX,EAAMW,OAAOE,OAAOZ,EAAOI,SACxC,OAAO,2BACAL,GADP,IAEIG,MAAM,EACNQ,WAGR,IAAK,mBACD,OAAO,2BACAX,GADP,IAEIG,MAAM,IAGd,IAAK,mBACD,IAAIS,EAAQZ,EAAMY,MAAMC,OAAOZ,EAAOI,SACtC,OAAO,2BACAL,GADP,IAEIG,MAAM,EACNS,UAGR,IAAK,kBACD,OAAO,2BACAZ,GADP,IAEIG,MAAM,IAGd,IAAK,wBACD,IAAIQ,EAASX,EAAMW,OAAOG,QAAO,SAAAC,GAC7B,OAAOA,EAAMC,aAAaf,EAAOI,WAErC,OAAO,2BACAL,GADP,IAEIG,MAAM,EACNQ,WAGR,IAAK,uBACD,OAAO,2BACAX,GADP,IAEIG,MAAM,IAGd,IAAK,uBACD,IAAIS,EAAQZ,EAAMY,MAAME,QAAO,SAAAG,GAC3B,OAAOA,EAAKC,SAASjB,EAAOI,WAEhC,OAAO,2BACAL,GADP,IAEIG,MAAM,EACNS,UAGR,IAAK,sBACD,OAAO,2BACAZ,GADP,IAEIG,MAAM,IAGd,QACI,OAAOH,KF3HgBV,EAAgBN,G,uGGV7CmC,EAAW,8DACXC,EAAS,mDAEFC,EAAO,uCAAG,sBAAAC,EAAA,gFACZ,SAAAC,GACHA,EAAK,CACDrB,KAAM,gBAHK,2CAAH,qDAQPsB,EAAW,uCAAG,sBAAAF,EAAA,gFAChB,SAAAlB,GACC,gBAAiBqB,UACjBA,UAAUC,YAAYC,oBAAmB,SAAAC,GACrCxB,EAAS,CACLF,KAAM,qBACNG,QAAS,CAACuB,EAASC,OAAOC,SAAUF,EAASC,OAAOE,iBAI5DzB,QAAQC,IAAI,6BACZH,EAAS,CACLF,KAAM,+BAZK,2CAAH,qDAkBX8B,EAAS,uCAAG,WAAMC,EAAOC,GAAb,eAAAZ,EAAA,0KAEjBa,EAAY,CAAEF,QAAOC,YAFJ,mBAId,SAAA1B,GACH4B,MAAMjB,EAAW,CACbkB,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAM7C,KAAK8C,UAAU,CAAEC,MAVV,8GAUiBN,gBAC/BO,MAAK,SAAAC,GACJ,OAAOA,EAAKC,UACbF,MAAK,SAAAH,GACDA,EAAKI,KAAKE,MACTrC,EAAK,CACDN,KAAM,gBACNG,QAASkC,EAAKI,KAAKE,QAGvBrC,EAAK,CACDN,KAAM,oBAGf4C,OAAM,SAAAlD,GACLU,QAAQC,IAAI,wBAAyBX,GACrCY,EAAK,CACDN,KAAM,uBA3BG,2CAAH,wDAiCT6C,EAAU,uCAAG,sBAAAzB,EAAA,gFACf,SAAAd,GACHA,EAAK,CACDN,KAAM,cAHQ,2CAAH,qDAQV8C,EAAS,uCAAG,WAAMf,GAAN,eAAAX,EAAA,mLAEjBa,EAAY,CAAEF,SAFG,mBAGd,SAAAtB,GACHyB,MAAMjB,EAAW,CACbkB,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAM7C,KAAK8C,UAAU,CAAEC,MATV,uHASiBN,gBAC/BO,MAAK,SAAAC,GACJ,OAAOA,EAAKC,UACbF,MAAK,SAAAH,GACDA,EAAKI,KAAKhC,OACTA,EAAO,CACHT,KAAM,2BACNG,QAASkC,EAAKI,KAAKhC,SAGvBA,EAAO,CACHT,KAAM,+BAGf4C,OAAM,SAAAlD,GACLU,QAAQC,IAAI,gCAAiCX,GAC7Ce,EAAO,CACHT,KAAM,kCA1BG,2CAAH,sDAgCT+C,EAAQ,uCAAG,WAAMhB,GAAN,eAAAX,EAAA,uIAEhBa,EAAY,CAAEF,SAFE,mBAGb,SAAArB,GACHwB,MAAMjB,EAAW,CACbkB,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAM7C,KAAK8C,UAAU,CAAEC,MATX,2EASkBN,gBAC/BO,MAAK,SAAAC,GACJ,OAAOA,EAAKC,UACbF,MAAK,SAAAH,GACDA,EAAKI,KAAK/B,MACTA,EAAM,CACFV,KAAM,0BACNG,QAASkC,EAAKI,KAAK/B,QAGvBA,EAAM,CACFV,KAAM,8BAGf4C,OAAM,SAAAlD,GACLU,QAAQC,IAAI,+BAAgCX,GAC5CgB,EAAM,CACFV,KAAM,iCA1BE,2CAAH,sDAgCRgD,EAAO,uCAAG,WAAMC,EAAOjC,EAAQkC,GAArB,iBAAA9B,EAAA,qPAEf+B,EAFe,UAEAF,EAFA,kBAEejC,GAC9BiB,EAAY,CAAEjB,SAAQkC,OAAMD,QAAOE,aAHpB,mBAIZ,SAAA9B,GACHa,MAAMjB,EAAW,CACbkB,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAM7C,KAAK8C,UAAU,CAAEC,MAVZ,yLAUmBN,gBAC/BO,MAAK,SAAAC,GACJ,OAAOA,EAAKC,UACbF,MAAK,SAAAH,GACDA,EAAKI,KAAKW,WAAWpC,OACpBK,EAAK,CACDrB,KAAM,mBACNG,QAAS,CACLa,SAAQkC,UAIhB7B,EAAK,CACDrB,KAAM,uBAGf4C,OAAM,SAAAlD,GACLU,QAAQC,IAAI,0BAA2BX,GACvC2B,EAAK,CACDrB,KAAM,0BA7BC,2CAAH,0DAmCPqD,EAAQ,uCAAG,WAAMJ,EAAOR,GAAb,SAAArB,EAAA,gFACb,SAAAC,GACHiC,EAAeb,GAAMD,MAAK,SAAAH,GACtB,IAAIvB,EAAU,UAAMmC,EAAN,mBAAsBZ,EAAKkB,WAElCd,EAAKe,SAASC,SAAS,GAAGC,WACjC,IAAIzB,EAAY,CAAEnB,aAAYmC,QAAOR,QACrCP,MAAMjB,EAAW,CACbkB,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAM7C,KAAK8C,UAAU,CAAEC,MARlB,mNAQyBN,gBAC/BO,MAAK,SAAAC,GACJ,OAAOA,EAAKC,UACbF,MAAK,SAAAH,GACDA,EAAKI,KAAKkB,YAAYlB,KACrBpB,EAAK,CACDrB,KAAM,oBACNG,QAASkC,EAAKI,KAAKkB,cAGvBtC,EAAK,CACDrB,KAAM,wBAGf4C,OAAM,SAAAlD,GACLU,QAAQC,IAAI,iCAAkCX,GAC9C2B,EAAK,CACDrB,KAAM,2BAGf4C,OAAM,SAAAlD,GACLU,QAAQC,IAAI,kCAAmCX,GAC/C2B,EAAK,CACDrB,KAAM,2BAnCE,2CAAH,wDAyCR4D,EAAW,uCAAG,WAAMX,EAAOM,GAAb,SAAAnC,EAAA,gFAChB,SAAAC,GACHwC,EAAoBN,GAAIf,MAAK,WACzB,IACI1B,EAAU,UAAMmC,EAAN,mBAAsBM,GAChCtB,EAAY,CAAEnB,cAClBoB,MAAMjB,EAAW,CACbkB,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAM7C,KAAK8C,UAAU,CAAEC,MARlB,kFAQyBN,gBAC/BO,MAAK,SAAAC,GACJ,OAAOA,EAAKC,UACbF,MAAK,SAAAH,GACDA,EAAKI,KAAKqB,YACTzC,EAAK,CACDrB,KAAM,wBACNG,QAASW,IAGbO,EAAK,CACDrB,KAAM,4BAGf4C,OAAM,SAAAlD,GACLU,QAAQC,IAAI,6BAA8BX,SAE/CkD,OAAM,SAAAlD,GACLU,QAAQC,IAAI,sCAAuCX,SA7BpC,2CAAH,wDAkCXqE,EAAU,uCAAG,WAAMd,EAAOjC,GAAb,iBAAAI,EAAA,yIAElB+B,EAFkB,UAEHF,EAFG,kBAEYjC,GAC9BiB,EAAY,CAAEkB,aAHI,mBAIf,SAAA9B,GACHa,MAAMjB,EAAW,CACbkB,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAM7C,KAAK8C,UAAU,CAAEC,MAVT,6EAUgBN,gBAC/BO,MAAK,SAAAC,GACJ,OAAOA,EAAKC,UACbF,MAAK,SAAAH,GACDA,EAAKI,KAAKuB,WACT3C,EAAK,CACDrB,KAAM,uBACNG,QAASa,IAGbK,EAAK,CACDrB,KAAM,2BAGf4C,OAAM,SAAAlD,GACLU,QAAQC,IAAI,4BAA6BX,SAzB3B,2CAAH,wDA8BjB4D,EAAiB,SAACW,GACpB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBlC,MAAM,GAAD,OAAIhB,EAAJ,2CAAqD,CACtDiB,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAM7C,KAAK8C,UAAU2B,KACtBzB,KANH,uCAMQ,WAAMC,GAAN,SAAArB,EAAA,0DACDqB,EAAK4B,GADJ,yCAEO5B,EAAKC,QAFZ,OAIAtC,QAAQC,IAAI,mCAAoCoC,EAAK6B,YACrDF,EAAO3B,EAAK6B,YALZ,2CANR,uDAaG9B,MAAK,SAAAH,GACJ8B,EAAQ9B,UAKdwB,EAAsB,SAACU,GACzB,OAAO,IAAIL,SAAQ,SAACC,EAASC,GACzBlC,MAAM,GAAD,OAAIhB,EAAJ,YAAcqD,EAAd,2CAAgE,CACjEpC,OAAQ,WACTK,MAAK,SAAAC,GACDA,EAAK4B,GACJF,KAEAK,MAAM/B,EAAKgC,UACXrE,QAAQC,IAAI,uCAAwCoC,EAAK6B,YACzDF,EAAO3B,EAAK6B,oB,6KCrRtBI,G,4MAEJ5E,MAAQ,CACN6E,SAAS,EACTC,kBAAkB,G,EAGpBC,c,sBAAgB,sBAAAzD,EAAA,sEACR,EAAK0D,MAAMC,SADH,2C,uDAIP,IAAD,OACN,OACE,yBAAKC,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,SAAD,CAAQC,aAAW,qBACjB,kBAAC,mBAAD,CACEA,aAAW,YACXC,QAAS,kBAAM,EAAKC,SAAS,CAACR,SAAU,EAAK7E,MAAM6E,WACnDS,SAAUC,KAAKvF,MAAM6E,UAErB,kBAAC,aAAD,CAAYnE,KAAK,QAAQ8E,OAAO,IAAhC,kBAGF,kBAAC,kBAAD,KAEID,KAAKP,MAAMxE,KACX,oCACE,kBAAC,qBAAD,CAAoB4E,QAAS,kBAAM,EAAKC,SAAS,CAACP,kBAAkB,KAAQK,aAAW,QACrF,kBAAC,IAAD,OAEF,kBAACM,EAAA,EAAD,CACEC,KAAMH,KAAKvF,MAAM8E,iBACjBa,kBAAkB,QAClBC,oBAAoB,SACpBC,eAAgB,kBAAM,EAAKR,SAAS,CAACP,kBAAkB,KACvDgB,gBAAiB,kBAAM,EAAKT,SAAS,CAACP,kBAAkB,KACxDiB,kBAAmBR,KAAKR,eAGtBQ,KAAKP,MAAM7E,KACX,kBAAC6F,GAAA,EAAD,CAASC,OAAQV,KAAKP,MAAM7E,OAC5B,oCACE,yBAAK+F,MAAO,CAACC,UAAW,WACtB,yBAAKC,IAAI,SAASC,IAAKd,KAAKP,MAAMxE,KAAK8F,MAAOJ,MAAO,CAACK,MAAO,OAAQC,OAAQ,WAE/E,kBAACC,GAAA,EAAD,CACEhD,GAAG,OACHiD,UAAU,EACVC,UAAU,aACVC,OAAO,EACPC,MAAOtB,KAAKP,MAAMxE,KAAK4C,KACvBlD,KAAK,SAEP,6BACA,kBAACuG,GAAA,EAAD,CACEhD,GAAG,QACHiD,UAAU,EACVC,UAAU,cACVC,OAAO,EACPC,MAAOtB,KAAKP,MAAMxE,KAAKyB,MACvB/B,KAAK,YAMf,qCAEF,kBAAC,IAAD,CAAM4G,GAAG,kBACP,kBAAC,qBAAD,CAAoB3B,aAAW,wBAC7B,kBAAC,IAAD,QAGJ,kBAAC,IAAD,CAAM2B,GAAG,aACP,kBAAC,qBAAD,CAAoB3B,aAAW,gBAC7B,kBAAC,IAAD,SAIN,kBAAC,UAAD,CAASA,aAAW,kBAAkB4B,QAAQ,EAAMC,iBAAiB,EAAOC,SAAU1B,KAAKvF,MAAM6E,SAC/F,kBAAC,eAAD,KACI,kBAAC,IAAD,CAAMiC,GAAG,SACP,kBAAC,cAAD,CAAaI,WAAYC,KAAzB,SAKA5B,KAAKP,MAAMxE,KACX,oCACE,kBAAC,cAAD,CAAaE,KAAK,QAAQwG,WAAYE,KAAtC,QAGA,kBAAC,cAAD,CAAa1G,KAAK,aAAawG,WAAYG,KAA3C,aAGA,kBAAC,cAAD,CAAa3G,KAAK,aAAawG,WAAYI,KAA3C,cAIF,qCAEF,kBAAC,cAAD,CAAa5G,KAAK,OAAOwG,WAAYK,KAArC,uBAOV,kBAAC,UAAD,KACGhC,KAAKP,MAAMwC,e,GA9GEC,IAAMC,WA4H9B,IASeC,gBAhBf,SAAyB3H,GACvB,MAAO,CACLQ,KAAMR,EAAMQ,KACZL,KAAMH,EAAMG,SAIW,SAACyH,GAC1B,MAAO,CACH3C,OAAO,WAAD,4BAAE,sBAAA3D,EAAA,kEACJsG,EADI,SACWvG,IADX,8CAEJuG,EAFI,SAEW7E,IAFX,8EAAF,kDAAC,MAOE4E,CAA6C/C,I,kBC1JtDiD,G,4MACF7H,MAAQ,CACJiC,MAAO,GACPC,SAAU,GACV4F,gBAAgB,G,EAEpBC,mB,sBAAqB,sBAAAzG,EAAA,sEACX,EAAK0D,MAAMnC,MAAM,EAAK7C,MAAMiC,MAAO,EAAKjC,MAAMkC,UADnC,2C,EAGrB8F,mBAAqB,SAACC,GAClB,EAAK5C,SAAS,CAACpD,MAAOgG,EAAIC,OAAOrB,S,EAErCsB,sBAAwB,SAACF,GACrB,EAAK5C,SAAS,CAACnD,SAAU+F,EAAIC,OAAOrB,S,uDAE/B,IAAD,OACJ,OACI,yBAAKX,MAAO,CAACC,UAAW,WACpB,6BACI,yBAAKC,IAAI,SAASC,IAAI,6GAE1B,6BACA,yRAGA,6BAEKd,KAAKP,MAAMxE,KA0CZ,oCACI,6BACI,kBAAC4H,GAAA,EAAD,CAAQ1H,KAAK,QAAb,qBAEJ,6BACA,yBAAKwE,UAAU,wBAAwBgB,MAAO,CAACmC,SAAU,SAAzD,8BA9CJ,oCACI,6BACI,kBAACD,GAAA,EAAD,CAAQlB,WAAYoB,WAASlD,QAAS,kBAAM,EAAKC,SAAS,CAACyC,gBAAgB,MAA3E,gBAEJ,6BACA,yBAAK5C,UAAU,wBAAwBgB,MAAO,CAACmC,SAAU,SAAzD,mFAGA,kBAAC5C,EAAA,EAAD,CACIC,KAAMH,KAAKvF,MAAM8H,eACjBnC,kBAAkB,QAClBC,oBAAoB,QACpBC,eAAgB,kBAAM,EAAKR,SAAS,CAACyC,gBAAgB,KACrDhC,gBAAiBP,KAAKwC,mBACtBhC,kBAAmB,kBAAM,EAAKV,SAAS,CAACyC,gBAAgB,KACxDpB,UAAU,GAETnB,KAAKP,MAAM7E,KAAK,kBAAC6F,GAAA,EAAD,CAASC,OAAQV,KAAKP,MAAM7E,OAAS,qCACtD,kBAACsG,GAAA,EAAD,CACIhD,GAAG,QACHiD,UAAU,EACVC,UAAU,cACVC,OAAO,EACP2B,YAAY,iBACZ1B,MAAOtB,KAAKvF,MAAMiC,MAClB/B,KAAK,OACLsI,SAAUjD,KAAKyC,qBAEnB,6BACA,kBAACvB,GAAA,EAAD,CACIhD,GAAG,WACHiD,UAAU,EACVC,UAAU,cACVC,OAAO,EACP2B,YAAY,aACZ1B,MAAOtB,KAAKvF,MAAMkC,SAClBhC,KAAK,WACLsI,SAAUjD,KAAK4C,+B,GAjE1BV,IAAMC,WA2F3B,IASeC,gBAhBf,SAAyB3H,GACrB,MAAO,CACLG,KAAMH,EAAMG,KACZK,KAAMR,EAAMQ,SAIS,SAACoH,GACxB,MAAO,CACH/E,MAAM,WAAD,4BAAE,WAAMZ,EAAOC,GAAb,SAAAZ,EAAA,kEACHsG,EADG,SACYvG,IADZ,8CAEHuG,EAFG,SAEY5F,EAAUC,EAAOC,GAF7B,8EAAF,qDAAC,MAOCyF,CAA6CE,I,UCtGvCY,G,uKAEb,OACI,kBAACC,GAAA,EAAD,KACI,kBAACA,GAAA,EAAD,KAAOnD,KAAKP,MAAM2D,QAClB,kBAACD,GAAA,EAAD,KAAOnD,KAAKP,MAAMwC,UAClB,kBAACkB,GAAA,EAAD,KAAOnD,KAAKP,MAAM4D,a,GANAnB,IAAMC,W,oBCCnBmB,G,uKAEb,OACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACA,kBAAC,GAAD,CAAMJ,OAAO,kBAAb,UAEA,kBAACI,GAAA,EAAD,KACA,kBAAC,GAAD,CAAMJ,OAAO,eAAb,e,GARuBlB,IAAMC,WCJxBsB,G,uKAEb,OACI,yC,GAHsBvB,IAAMC,WCAnBuB,G,uKAEb,OACI,wC,GAHqBxB,IAAMC,WCAlBwB,G,uKAEb,OACI,6C,GAH0BzB,IAAMC,W,8GCetCyB,GAAeC,EAAQ,KAEzBC,GAOAC,KAPAD,eACAE,GAMAD,KANAC,MACAC,GAKAF,KALAE,UACAC,GAIAH,KAJAG,SACAC,GAGAJ,KAHAI,UACAC,GAEAL,KAFAK,UACAC,GACAN,KADAM,YAGEC,G,kDAOF,WAAY7E,GAAO,IAAD,8BACd,cAAMA,IAPVhF,MAAQ,CACJ8J,aAAc,OACdC,aAAc,GACdC,UAAWC,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,IAAMH,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,KAGnF,EAQlBC,2BAA6B,SAACpC,GAC1B,EAAK5C,SAAS,CAACyE,aAAc7B,EAAIC,OAAOrB,SAT1B,EAYlByD,eAZkB,uCAYD,WAAMrC,GAAN,eAAA3G,EAAA,6DACTL,EAAOkI,GAAarI,QAAO,SAACG,GAC5B,OAAOA,EAAKC,SAAS,EAAKlB,MAAM8J,gBAFvB,SAIP,EAAK9E,MAAMuF,QAAQ,EAAKvF,MAAMxE,KAAKyB,MAAO,EAAKjC,MAAM8J,aAAc7I,EAAK,GAAGmC,MAJpE,2CAZC,wDAmBlBoH,gBAnBkB,sBAmBA,sBAAAlJ,EAAA,sEACR,EAAK0D,MAAMyF,SAAS,EAAKzF,MAAMxE,KAAKyB,MAAO,EAAKjC,MAAM+J,cAD9C,2CAnBA,EAuBlBjG,YAvBkB,uCAuBJ,WAAMW,GAAN,SAAAnD,EAAA,sEACJ,EAAK0D,MAAMhB,YAAY,EAAKgB,MAAMxE,KAAKyB,MAAOwC,GAD1C,2CAvBI,wDA2BlBR,WA3BkB,uCA2BL,WAAM/C,GAAN,SAAAI,EAAA,sEACH,EAAK0D,MAAMd,WAAW,EAAKc,MAAMxE,KAAKyB,MAAOf,GAD1C,2CA3BK,wDA+BlBwJ,SAAW,CACPC,IAAK,SAACC,EAAGC,EAAGC,GACR,IAAMC,EAAIC,OAAOC,aAAa,IAAML,EAAIC,EAAIC,GAAK,GACjD,MAAM,WAAN,OAAkBC,EAAlB,mCAA8CD,EAA9C,YAAmDF,EAAnD,YAAwDC,EAAxD,SAEJK,UAAW,SAACN,EAAGC,EAAGC,EAAGK,GACjB,MAAM,uCAAN,OAA8CL,EAA9C,YAAmDF,EAAnD,YAAwDC,GAAxD,OAA4DM,GAAO,EAAI,MAAQ,GAA/E,SAEJC,OAAQ,SAACR,EAAGC,EAAGC,EAAGK,GACd,MAAM,iDAAN,OAAwDL,EAAxD,YAA6DF,EAA7D,YAAkEC,GAAlE,OAAsEM,GAAO,EAAI,MAAQ,GAAzF,UAxCU,EA4ClBE,sBAAwB,SAAC1I,GACrB,IAAI2I,EAAK,CAAC3I,EAAK4I,OAAOD,GAAG,GAAI3I,EAAK4I,OAAOD,GAAG,IACxCE,EAAK,CAAC7I,EAAK4I,OAAOC,GAAG,GAAI7I,EAAK4I,OAAOC,GAAG,IACxCC,EAAK,CAACD,EAAG,GAAIF,EAAG,IAChBI,EAAK,CAACJ,EAAG,GAAIE,EAAG,IAChBG,EAAS,CACT,KAAQ,EAAK3L,MAAMgK,UACnB,SAAY,CACR,KAAQ,oBACR,SAAY,CACR,CACI,KAAQ,UACR,WAAc,GACd,SAAY,CACR,KAAQ,UACR,YAAe,CACX,CACIwB,EACAE,EACAJ,EACAG,EACAD,SAQ5B,EAAKnG,SAAS,CAAC0E,aAAc4B,KAvE7B,EAAK3G,MAAM4G,mBACXtL,QAAQC,IAAI,EAAKyE,MAAM5E,UACvB,EAAK4E,MAAM6G,cAAc,EAAK7G,MAAMxE,KAAKyB,OACzC,EAAK+C,MAAM8G,eAAe,EAAK9G,MAAMxE,KAAKyB,OAL5B,E,qDA4ET,IAAD,OACJ,OACI,kBAAC8J,GAAA,EAAD,KACKxG,KAAKP,MAAM7E,KAAK,kBAAC6F,GAAA,EAAD,CAASgG,aAAa,EAAM/F,OAAQV,KAAKP,MAAM7E,OAAQ,qCACxE,kBAAC2I,GAAA,EAAD,KACI,wBAAI5C,MAAO,CAACK,MAAO,OAAQJ,UAAW,WAAtC,mBAEJ,6BACA,kBAAC2C,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAQkD,GAAI,EAAGC,GAAI,EAAGhG,MAAO,CAACC,UAAW,WACrC,kBAAC,KAAD,CAAKgG,OAAQ5G,KAAKP,MAAM5E,SAAUgM,SAAS,EAAMC,KAAM,GAAI7F,OAAQ,IAAK8F,gBAAiB/G,KAAK8F,sBAAuBX,SAAUnF,KAAKmF,SAAL,YAC/H,yBAAKxF,UAAU,wBAAwBgB,MAAO,CAACmC,SAAU,SAAzD,oEAGA,kBAACD,GAAA,EAAD,CAAQlB,WAAYqF,KAAOnH,QAASG,KAAKiF,iBAAzC,QAIJ,kBAACzB,GAAA,EAAD,CAAQkD,GAAI,EAAGC,GAAI,GACf,kBAAC7C,GAAD,CAAgBmD,MAAM,eAClB,kBAACjD,GAAD,KACI,kBAACC,GAAD,KACI,kBAACC,GAAD,KACI,kBAACG,GAAD,CAAa6C,IAAI,WAAjB,YAGA,kBAAC7C,GAAD,CAAa6C,IAAI,YAAjB,kBAGA,kBAAC7C,GAAD,CAAa6C,IAAI,aAKzB,kBAAC/C,GAAD,KAEQnE,KAAKP,MAAMrE,OAAO+L,OAClBnH,KAAKP,MAAMrE,OAAOgM,KAAI,SAAA5L,GAClB,IAAI6L,EAAY7L,EAAMC,WAAW6L,YAAY,KACzCpJ,EAAK1C,EAAMC,WAAWoJ,UAAUwC,EAAU,GAC1CE,EAAM/L,EAAM4B,KAAKe,SAASC,SAAS,GAAGoJ,SAASC,YAAY,GAAG,GAC9DC,EAAMlM,EAAM4B,KAAKe,SAASC,SAAS,GAAGoJ,SAASC,YAAY,GAAG,GAClE,OACA,kBAACvD,GAAD,CAAUgD,IAAK1L,EAAMC,YACjB,kBAAC2I,GAAD,KACKlG,GAEL,kBAACkG,GAAD,KACKmD,EAAI,GAAG,KAAKA,EAAI,GAAG,KAAKG,EAAI,GAAG,KAAKA,EAAI,IAE7C,kBAACtD,GAAD,KACI,kBAACvB,GAAA,EAAD,CACI8E,KAAK,QACLC,SAAU,EACVC,YAAY,OACZlG,WAAYmG,KACZC,gBAAgB,SAChBlI,QAAS,WAAO,EAAKtB,YAAYL,WAMjD,kBAACgG,GAAD,KACI,kBAACE,GAAD,CAAW4D,QAAS,GAApB,uBAU5B,6BACA,kBAACzE,GAAA,EAAD,KACI,wBAAI5C,MAAO,CAACK,MAAO,OAAQJ,UAAW,WAAtC,kBAEJ,6BACA,kBAAC2C,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAQkD,GAAI,EAAGC,GAAI,GACf,kBAACsB,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACIhK,GAAG,gBACHiK,WAAW,qBACX/G,UAAU,OACVgH,QAAQ,EACRC,aAAcrI,KAAKvF,MAAM8J,aACzBtB,SAAUjD,KAAK8E,4BAGXlB,GAAawD,KAAI,SAAA1L,GACb,OACI,kBAAC4M,GAAA,EAAD,CAAYpB,IAAKxL,EAAKC,OAAQ4M,KAAM7M,EAAKmC,KAAMyD,MAAO5F,EAAKC,aAK3E,6BACA,kBAACkH,GAAA,EAAD,CACIlB,WAAYqF,KACZnH,QAASG,KAAK+E,gBAFlB,SAQR,kBAACvB,GAAA,EAAD,CAAQkD,GAAI,EAAGC,GAAI,GACf,kBAAC7C,GAAD,KACI,kBAACE,GAAD,KACI,kBAACC,GAAD,KACI,kBAACC,GAAD,KACI,kBAACG,GAAD,CAAa6C,IAAI,UAAjB,WAGA,kBAAC7C,GAAD,CAAa6C,IAAI,YAAjB,aAGA,kBAAC7C,GAAD,CAAa6C,IAAI,aAKzB,kBAAC/C,GAAD,KAEQnE,KAAKP,MAAMpE,MAAM8L,OACjBnH,KAAKP,MAAMpE,MAAM+L,KAAI,SAAA1L,GACjB,OACI,kBAACwI,GAAD,CAAUgD,IAAKxL,EAAKC,QAChB,kBAACyI,GAAD,KACK1I,EAAKC,QAEV,kBAACyI,GAAD,KACK1I,EAAKmC,MAEV,kBAACuG,GAAD,KACI,kBAACvB,GAAA,EAAD,CACI8E,KAAK,QACLC,SAAU,EACVC,YAAY,OACZlG,WAAYmG,KACZC,gBAAgB,SAChBlI,QAAS,WAAO,EAAKnB,WAAWhD,EAAKC,gBAMzD,kBAACuI,GAAD,KACI,kBAACE,GAAD,CAAW4D,QAAS,GAApB,2B,GAxOpB9F,IAAMC,WAmSfC,gBA5CS,SAAC3H,GACrB,MAAO,CACHQ,KAAMR,EAAMQ,KACZG,OAAQX,EAAMW,OACdC,MAAOZ,EAAMY,MACbmN,KAAM/N,EAAM+N,KACZ5N,KAAMH,EAAMG,KACZC,SAAUJ,EAAMI,aAIG,SAACwH,GACxB,MAAO,CACH2C,QAAQ,WAAD,4BAAE,WAAMpH,EAAOjC,EAAQkC,GAArB,SAAA9B,EAAA,kEACLsG,EADK,SACUvG,IADV,8CAELuG,EAFK,SAEU1E,EAAQC,EAAOjC,EAAQkC,GAFjC,8EAAF,uDAAC,GAIRc,WAAW,WAAD,4BAAE,WAAMf,EAAOjC,GAAb,SAAAI,EAAA,kEACRsG,EADQ,SACOvG,IADP,8CAERuG,EAFQ,SAEO3D,EAAWd,EAAOjC,GAFzB,8EAAF,qDAAC,GAIXuJ,SAAS,WAAD,4BAAE,WAAMtH,EAAOR,GAAb,SAAArB,EAAA,kEACNsG,EADM,SACSvG,IADT,8CAENuG,EAFM,SAESrE,EAASJ,EAAOR,GAFzB,8EAAF,qDAAC,GAITqB,YAAY,WAAD,4BAAE,WAAMb,EAAOsB,GAAb,SAAAnD,EAAA,kEACTsG,EADS,SACMvG,IADN,8CAETuG,EAFS,SAEM9D,EAAYX,EAAOsB,GAFzB,8EAAF,qDAAC,GAIZoH,cAAc,WAAD,4BAAE,WAAM5J,GAAN,SAAAX,EAAA,kEACXsG,EADW,SACIvG,IADJ,8CAEXuG,EAFW,SAEI3E,EAAShB,GAFb,8EAAF,mDAAC,GAId6J,eAAe,WAAD,4BAAE,WAAM7J,GAAN,SAAAX,EAAA,kEACZsG,EADY,SACGvG,IADH,8CAEZuG,EAFY,SAEG5E,EAAUf,GAFb,8EAAF,mDAAC,GAIf2J,iBAAiB,WAAD,4BAAE,sBAAAtK,EAAA,kEACdsG,EADc,SACCvG,IADD,8CAEduG,EAFc,SAECpG,IAFD,8EAAF,kDAAC,MAOVmG,CAA6CkC,I,SCxTvCmE,G,uKAEb,OACI,kBAAC,QAAD,KACI,kBAAC,OAAD,KACI,kBAAC,UAAD,KAEQzI,KAAKP,MAAMwC,gB,GAPFC,IAAMC,W,kBC2B5BuG,G,uKApBX,OACE,oCACE,kBAAC,GAAD,KACE,kBAAC,IAAD,KACE,kBAAC,GAAD,KACE,kBAAC,KAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,GAAD,SACpC,kBAAC,KAAD,CAAOF,OAAK,EAACC,KAAK,QAAQC,OAAQ,kBAAM,kBAAC,GAAD,SACxC,kBAAC,KAAD,CAAOD,KAAK,aAAaC,OAAQ,kBAAM,kBAAC,GAAD,SACvC,kBAAC,KAAD,CAAOD,KAAK,QAAQC,OAAQ,kBAAM,kBAAC,GAAD,SAClC,kBAAC,KAAD,CAAOD,KAAK,OAAOC,OAAQ,kBAAM,kBAAC,GAAD,SACjC,kBAAC,KAAD,CAAOD,KAAK,YAAYC,OAAQ,kBAAM,kBAAC,GAAD,SACtC,kBAAC,KAAD,CAAOD,KAAK,aAAaC,OAAQ,kBAAM,kBAAC,GAAD,iB,GAbnC3G,IAAMC,WCAJ2G,QACW,cAA7BpP,OAAOmB,SAASkO,UAEe,UAA7BrP,OAAOmB,SAASkO,UAEhBrP,OAAOmB,SAASkO,SAASC,MACvB,2DCTNzO,EAAM0O,WAAU,YdGS,SAACxO,GACtB,IACI,IAAMT,EAAkBG,KAAK8C,UAAUxC,GACvCR,aAAaiB,QAAQ,qBAAsBlB,GAC7C,MAAMK,GACJU,QAAQC,IAAIX,IcPlB6O,CAAU3O,EAAM4O,eAGlBC,IAASP,OACP,kBAAC,IAAD,CAAUtO,MAAOA,GACf,kBAAC,GAAD,OAEF8O,SAASC,eAAe,SDkHpB,kBAAmBpN,WACrBA,UAAUqN,cAAcC,MACrBrM,MAAK,SAAAsM,GACJA,EAAaC,gBAEdnM,OAAM,SAAAoM,GACL5O,QAAQ4O,MAAMA,EAAMC,a","file":"static/js/main.48fb3e84.chunk.js","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { reducer } from './Reducer';\r\nimport { loadState } from './localStorage';\r\n\r\nconst composeEnhancers = typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\nconst enhancer = composeEnhancers(\r\n  applyMiddleware(thunk),\r\n);\r\nconst persistedState = loadState() || {};\r\nconst store = createStore(reducer, persistedState, enhancer);\r\n\r\nexport default store;","export const loadState = () => {\r\n    try{\r\n        const serializedState = localStorage.getItem('projectkisaanstate');\r\n        if(serializedState === null){\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch(err){\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport const saveState = (state) => {\r\n    try{\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('projectkisaanstate', serializedState);\r\n    } catch(err){\r\n        console.log(err);\r\n    }\r\n}","export const reducer = (state, action) => {\r\n    switch(action.type) {\r\n        case \"APP_BUSY\": {\r\n            return {\r\n                ...state,\r\n                busy: true\r\n            }\r\n        }\r\n        case \"LOCATION_RETRIEVED\": {\r\n            return {\r\n                ...state,\r\n                location: action.payload,\r\n                busy: false\r\n            }\r\n        }\r\n        case \"LOCATION_NOT_RETRIEVED\": {\r\n            console.log('Error while retrieving GeoLocation.');\r\n            return {\r\n                ...state,\r\n                busy: false\r\n            }\r\n        }\r\n        case \"LOGIN_FAILED\": {\r\n            console.log('No such user found. Check your email and password again.');\r\n            return {\r\n                ...state,\r\n                busy: false,\r\n                user: \"\"\r\n            };\r\n        }\r\n        case \"LOGIN_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                busy: false,\r\n                user: action.payload\r\n            }\r\n        }\r\n        case \"LOGOUT\": {\r\n            localStorage.setItem('projectkisaanstate', '');\r\n            window.location.href=\"#home\";\r\n            return {\r\n                ...state,\r\n                busy: false,\r\n                user: \"\"\r\n            };\r\n        }\r\n        case \"FIELDS_RETRIEVAL_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                busy: false,\r\n                fields: action.payload\r\n            }\r\n        }\r\n        case \"FIELDS_RETRIEVAL_FAILED\": {\r\n            return {\r\n                ...state,\r\n                busy: false\r\n            };\r\n        }\r\n        case \"CROPS_RETRIEVAL_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                busy: false,\r\n                crops: action.payload\r\n            }\r\n        }\r\n        case \"CROPS_RETRIEVAL_FAILED\": {\r\n            return {\r\n                ...state,\r\n                busy: false\r\n            };\r\n        }\r\n        case \"FIELD_ADD_SUCCESS\": {\r\n            let fields = state.fields.concat(action.payload);\r\n            return {\r\n                ...state,\r\n                busy: false,\r\n                fields\r\n            }\r\n        }\r\n        case \"FIELD_ADD_FAILED\": {\r\n            return {\r\n                ...state,\r\n                busy: false\r\n            };\r\n        }\r\n        case \"CROP_ADD_SUCCESS\": {\r\n            let crops = state.crops.concat(action.payload);\r\n            return {\r\n                ...state,\r\n                busy: false,\r\n                crops\r\n            }\r\n        }\r\n        case \"CROP_ADD_FAILED\": {\r\n            return {\r\n                ...state,\r\n                busy: false\r\n            };\r\n        }\r\n        case \"FIELD_REMOVAL_SUCCESS\": {\r\n            let fields = state.fields.filter(field => {\r\n                return field.fieldResId!==action.payload\r\n            });\r\n            return {\r\n                ...state,\r\n                busy: false,\r\n                fields\r\n            }\r\n        }\r\n        case \"FIELD_REMOVAL_FAILED\": {\r\n            return {\r\n                ...state,\r\n                busy: false\r\n            };\r\n        }\r\n        case \"CROP_REMOVAL_SUCCESS\": {\r\n            let crops = state.crops.filter(crop => {\r\n                return crop.cropId!==action.payload\r\n            });\r\n            return {\r\n                ...state,\r\n                busy: false,\r\n                crops\r\n            }\r\n        }\r\n        case \"CROP_REMOVAL_FAILED\": {\r\n            return {\r\n                ...state,\r\n                busy: false\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","const serverURL= \"https://project-kisaan-graphql-server.herokuapp.com/graphql\";\r\nconst apiURL = \"https://api.agromonitoring.com/agro/1.0/polygons\";\r\n\r\nexport const setBusy = async() => {\r\n    return resp => {\r\n        resp({\r\n            type: \"APP_BUSY\"\r\n        });\r\n    }\r\n}\r\n\r\nexport const getLocation = async() => {\r\n    return location => {\r\n        if (\"geolocation\" in navigator) {\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                location({\r\n                    type: \"LOCATION_RETRIEVED\",\r\n                    payload: [position.coords.latitude, position.coords.longitude]\r\n                });\r\n            });\r\n        } else {\r\n            console.log(\"GeoLocation not supported\");\r\n            location({\r\n                type: \"LOCATION_NOT_RETRIEVED\"\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const loginUser = async(email, password) => {\r\n    let query = `query login($email: String, $password: String){login(email: $email, password: $password){name photo email}}`;\r\n    let variables = { email, password };\r\n\r\n    return user => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.login){\r\n                user({\r\n                    type: \"LOGIN_SUCCESS\",\r\n                    payload: body.data.login\r\n                });\r\n            } else {\r\n                user({\r\n                    type: \"LOGIN_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log('error while loggin in', err);\r\n            user({\r\n                type: \"LOGIN_FAILED\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const logoutUser = async() => {\r\n    return user => {\r\n        user({\r\n            type: \"LOGOUT\",\r\n        })\r\n    }\r\n}\r\n\r\nexport const getFields = async(email) => {\r\n    let query = `query fields($email: String){fields(email: $email){fieldResId data{name geo_json{features{geometry{coordinates}}}}}}`;\r\n    let variables = { email };\r\n    return fields => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.fields){\r\n                fields({\r\n                    type: \"FIELDS_RETRIEVAL_SUCCESS\",\r\n                    payload: body.data.fields\r\n                });\r\n            } else {\r\n                fields({\r\n                    type: \"FIELDS_RETRIEVAL_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log('error while retrieving fields', err);\r\n            fields({\r\n                type: \"FIELDS_RETRIEVAL_FAILED\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const getCrops = async(email) => {\r\n    let query = `query crops($email: String){crops(email: $email){cropId name cropResId}}`;\r\n    let variables = { email };\r\n    return crops => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.crops){\r\n                crops({\r\n                    type: \"CROPS_RETRIEVAL_SUCCESS\",\r\n                    payload: body.data.crops\r\n                });\r\n            } else {\r\n                crops({\r\n                    type: \"CROPS_RETRIEVAL_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log('error while retrieving crops', err);\r\n            crops({\r\n                type: \"CROPS_RETRIEVAL_FAILED\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const newCrop = async(owner, cropId, name) => {\r\n    let query = `mutation addCrop($owner: String, $cropId: String, $cropResId: String, $name: String){createCrop(owner: $owner, cropId: $cropId, name: $name, cropResId: $cropResId){cropResId cropId}}`;\r\n    let cropResId = `${owner}:crops:${cropId}`;\r\n    let variables = { cropId, name, owner, cropResId};\r\n    return resp => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.createCrop.cropId){\r\n                resp({\r\n                    type: \"CROP_ADD_SUCCESS\",\r\n                    payload: {\r\n                        cropId, name\r\n                    }\r\n                });\r\n            } else {\r\n                resp({\r\n                    type: \"CROP_ADD_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log('error while adding crop', err);\r\n            resp({\r\n                type: \"CROP_ADD_FAILED\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const newField = async(owner, data) => {\r\n    return resp => {\r\n        addFieldToAgro(data).then(body => {\r\n            let fieldResId = `${owner}:fields:${body.id}`;\r\n            let query = `mutation addField($owner: String, $data: FieldInputData, $fieldResId: String){createField(owner: $owner, data: $data, fieldResId: $fieldResId){fieldResId data{name geo_json{features{geometry{coordinates}}}}}}`;\r\n            delete data.geo_json.features[0].properties;\r\n            let variables = { fieldResId, owner, data };\r\n            fetch(serverURL, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ query, variables })\r\n            }).then(data => {\r\n                return data.json();\r\n            }).then(body => {\r\n                if(body.data.createField.data){\r\n                    resp({\r\n                        type: \"FIELD_ADD_SUCCESS\",\r\n                        payload: body.data.createField\r\n                    });\r\n                } else {\r\n                    resp({\r\n                        type: \"FIELD_ADD_FAILED\"\r\n                    });\r\n                }\r\n            }).catch(err => {\r\n                console.log('error while adding field to db', err);\r\n                resp({\r\n                    type: \"FIELD_ADD_FAILED\"\r\n                });\r\n            });\r\n        }).catch(err => {\r\n            console.log('error while adding field to api', err);\r\n            resp({\r\n                type: \"FIELD_ADD_FAILED\"\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteField = async(owner, id) => {\r\n    return resp => {\r\n        deleteFieldFromAgro(id).then(() => {\r\n            let query = `mutation deleteField($fieldResId: String){removeField(fieldResId: $fieldResId)}`;\r\n            let fieldResId = `${owner}:fields:${id}`;\r\n            let variables = { fieldResId };\r\n            fetch(serverURL, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ query, variables })\r\n            }).then(data => {\r\n                return data.json();\r\n            }).then(body => {\r\n                if(body.data.removeField){\r\n                    resp({\r\n                        type: \"FIELD_REMOVAL_SUCCESS\",\r\n                        payload: fieldResId\r\n                    });\r\n                } else {\r\n                    resp({\r\n                        type: \"FIELD_REMOVAL_FAILED\"\r\n                    });\r\n                }\r\n            }).catch(err => {\r\n                console.log('error while deleting field', err);\r\n            });\r\n        }).catch(err => {\r\n            console.log('error while deleting field from api', err);\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteCrop = async(owner, cropId) => {\r\n    let query = `mutation deleteCrop($cropResId: String){removeCrop(cropResId: $cropResId)}`;\r\n    let cropResId = `${owner}:crops:${cropId}`;\r\n    let variables = { cropResId };\r\n    return resp => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.removeCrop){\r\n                resp({\r\n                    type: \"CROP_REMOVAL_SUCCESS\",\r\n                    payload: cropId\r\n                });\r\n            } else {\r\n                resp({\r\n                    type: \"CROP_REMOVAL_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log('error while deleting crop', err);\r\n        });\r\n    }\r\n}\r\n\r\nconst addFieldToAgro = (fieldData) => {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(`${apiURL}?appid=83e9d92cb19c29c0045da2e0282321f5`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(fieldData)\r\n        }).then(async data => {\r\n            if(data.ok){\r\n                return data.json()\r\n            } else {\r\n                console.log('error while adding field to agro', data.statusText);\r\n                reject(data.statusText);\r\n            }\r\n        }).then(body => {\r\n            resolve(body);\r\n        })\r\n    })\r\n}\r\n\r\nconst deleteFieldFromAgro = (fieldId) => {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(`${apiURL}/${fieldId}?appid=83e9d92cb19c29c0045da2e0282321f5`, {\r\n            method: 'DELETE'\r\n        }).then(data => {\r\n            if(data.ok){\r\n                resolve()\r\n            } else {\r\n                alert(data.response);\r\n                console.log('error while deleting field from agro', data.statusText);\r\n                reject(data.statusText);\r\n            }\r\n        })\r\n    })\r\n}","import React from 'react';\r\nimport {\r\n  Link,\r\n  HashRouter\r\n} from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport { logoutUser, setBusy } from '../Actions';\r\nimport Forum20 from '@carbon/icons-react/lib/forum/20';\r\nimport Home20 from '@carbon/icons-react/lib/home/20';\r\nimport Dashboard20 from \"@carbon/icons-react/lib/dashboard/20\";\r\nimport Data_220 from \"@carbon/icons-react/lib/data--2/20\";\r\nimport Help20 from \"@carbon/icons-react/lib/help/20\";\r\nimport User20 from \"@carbon/icons-react/lib/user/20\";\r\nimport Notification20 from \"@carbon/icons-react/lib/notification/20\";\r\nimport Settings20 from \"@carbon/icons-react/lib/settings/20\";\r\nimport {\r\n  Header,\r\n  HeaderMenuButton,  \r\n  HeaderName,\r\n  HeaderGlobalBar,\r\n  HeaderGlobalAction,\r\n  SideNav,\r\n  SideNavItems,\r\n  SideNavLink,\r\n  Content\r\n} from \"carbon-components-react/lib/components/UIShell\";\r\nimport { Modal, TextInput, Loading } from 'carbon-components-react';\r\n \r\nclass AppLayout extends React.Component {\r\n\r\n  state = {\r\n    sideNav: false,\r\n    profileModalShow: false\r\n  }\r\n\r\n  _handleLogout = async() => {\r\n    await this.props.logout();\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"container\" >\r\n        <HashRouter>\r\n          <Header aria-label=\"IBM Platform Name\">\r\n            <HeaderMenuButton\r\n              aria-label=\"Open menu\"\r\n              onClick={() => this.setState({sideNav: !this.state.sideNav})}\r\n              isActive={this.state.sideNav}\r\n            />\r\n              <HeaderName href=\"#home\" prefix=\"\">\r\n                Project Kisaan\r\n              </HeaderName>\r\n            <HeaderGlobalBar>\r\n              {\r\n                this.props.user?\r\n                <>\r\n                  <HeaderGlobalAction onClick={() => this.setState({profileModalShow: true})} aria-label=\"User\">\r\n                    <User20 />\r\n                  </HeaderGlobalAction>\r\n                  <Modal \r\n                    open={this.state.profileModalShow}\r\n                    primaryButtonText=\"Close\"\r\n                    secondaryButtonText=\"Logout\"\r\n                    onRequestClose={() => this.setState({profileModalShow: false})}\r\n                    onRequestSubmit={() => this.setState({profileModalShow: false})}\r\n                    onSecondarySubmit={this._handleLogout}\r\n                  >\r\n                    {\r\n                      this.props.busy?\r\n                      <Loading active={this.props.busy} />:\r\n                      <>\r\n                        <div style={{textAlign: 'center'}}>\r\n                          <img alt=\"avatar\" src={this.props.user.photo} style={{width: '80px', height: '80px'}}></img>\r\n                        </div>\r\n                        <TextInput\r\n                          id=\"name\"\r\n                          disabled={true}\r\n                          labelText=\"Your Name:\"\r\n                          light={false}\r\n                          value={this.props.user.name}\r\n                          type=\"text\"\r\n                        />\r\n                        <br/>\r\n                        <TextInput\r\n                          id=\"email\"\r\n                          disabled={true}\r\n                          labelText=\"Your Email:\"\r\n                          light={false}\r\n                          value={this.props.user.email}\r\n                          type=\"text\"\r\n                        />\r\n                      </>\r\n                    }\r\n                  </Modal>\r\n                </>:\r\n                <></>\r\n              }\r\n              <Link to=\"/notifications\">\r\n                <HeaderGlobalAction aria-label=\"Global Notifications\">\r\n                  <Notification20 />\r\n                </HeaderGlobalAction>\r\n              </Link>\r\n              <Link to=\"/settings\">\r\n                <HeaderGlobalAction aria-label=\"App Settings\">\r\n                  <Settings20 />\r\n                </HeaderGlobalAction>\r\n              </Link>\r\n            </HeaderGlobalBar>\r\n            <SideNav aria-label=\"Side navigation\" isRail={true} defaultExpanded={false} expanded={this.state.sideNav}>\r\n              <SideNavItems>\r\n                  <Link to=\"/home\">\r\n                    <SideNavLink renderIcon={Home20}>\r\n                      Home\r\n                    </SideNavLink>\r\n                  </Link>\r\n                  {\r\n                    this.props.user?\r\n                    <>\r\n                      <SideNavLink href=\"#chat\" renderIcon={Forum20}>\r\n                        Chat\r\n                      </SideNavLink>\r\n                      <SideNavLink href=\"#configure\" renderIcon={Data_220}>\r\n                        Configure\r\n                      </SideNavLink>\r\n                      <SideNavLink href=\"#dashboard\" renderIcon={Dashboard20}>\r\n                        Dashboard\r\n                      </SideNavLink>\r\n                    </>:\r\n                    <></>\r\n                  }\r\n                  <SideNavLink href=\"#faq\" renderIcon={Help20}>\r\n                    Assistance/FAQs\r\n                  </SideNavLink>\r\n              </SideNavItems>\r\n            </SideNav>\r\n          </Header>\r\n        </HashRouter>\r\n        <Content>\r\n          {this.props.children}\r\n        </Content>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n  return {\r\n    user: state.user,\r\n    busy: state.busy\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      logout: async() => {\r\n          dispatch(await setBusy());\r\n          dispatch(await logoutUser());\r\n      }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppLayout);\r\n","import React from 'react';\r\nimport { loginUser, setBusy } from '../Actions';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    Button, Modal, TextInput, Loading\r\n} from 'carbon-components-react';\r\nimport { Login20 } from '@carbon/icons-react';\r\nclass Splash extends React.Component {\r\n    state = {\r\n        email: \"\",\r\n        password: \"\",\r\n        loginModalShow: false\r\n    }\r\n    _handleLoginSubmit = async() => {\r\n        await this.props.login(this.state.email, this.state.password);\r\n    }\r\n    _handleEmailChange = (evt) => {\r\n        this.setState({email: evt.target.value});\r\n    }\r\n    _handlePasswordChange = (evt) => {\r\n        this.setState({password: evt.target.value});\r\n    }\r\n    render(){\r\n        return(\r\n            <div style={{textAlign: 'center'}}>\r\n                <div>\r\n                    <img alt=\"splash\" src=\"https://image.winudf.com/v2/image/Y29tLmphaWtpc2Fhbl9pY29uXzE1MDk0NjYxNTVfMDUy/icon.png?w=170&fakeurl=1\"></img>\r\n                </div>\r\n                <br/>\r\n                <p>\r\n                    The project focuses on building a centralized automatic device which will be a great asset for farmers to make them able to produce as much as they can. It can be done by giving them accurate figures and ideas about what, how, when and where to grow.\r\n                </p>\r\n                <br/>\r\n                {\r\n                    !this.props.user?\r\n                    <>\r\n                        <div>\r\n                            <Button renderIcon={Login20} onClick={() => this.setState({loginModalShow: true})}>Get Started</Button>\r\n                        </div>\r\n                        <br/>\r\n                        <div className=\"bx--form__helper-text\" style={{maxWidth: '100%'}}>\r\n                            You need to sign in with the credentials provided to you with AgriBot purchase.\r\n                        </div>\r\n                        <Modal \r\n                            open={this.state.loginModalShow}\r\n                            primaryButtonText=\"Login\"\r\n                            secondaryButtonText=\"Close\"\r\n                            onRequestClose={() => this.setState({loginModalShow: false})}\r\n                            onRequestSubmit={this._handleLoginSubmit}\r\n                            onSecondarySubmit={() => this.setState({loginModalShow: false})}\r\n                            disabled={true}\r\n                        >\r\n                            {this.props.busy?<Loading active={this.props.busy} />:<></>}\r\n                            <TextInput\r\n                                id=\"email\"\r\n                                disabled={false}\r\n                                labelText=\"Your Email:\"\r\n                                light={false}\r\n                                placeholder=\"mark@gmail.com\"\r\n                                value={this.state.email}\r\n                                type=\"text\"\r\n                                onChange={this._handleEmailChange}\r\n                            />\r\n                            <br/>\r\n                            <TextInput\r\n                                id=\"password\"\r\n                                disabled={false}\r\n                                labelText=\"Your Email:\"\r\n                                light={false}\r\n                                placeholder=\"**********\"\r\n                                value={this.state.password}\r\n                                type=\"password\"\r\n                                onChange={this._handlePasswordChange}\r\n                            />\r\n                        </Modal>\r\n                    </>:\r\n                    <>\r\n                        <div>\r\n                            <Button href=\"#faq\">More Information</Button>\r\n                        </div>\r\n                        <br/>\r\n                        <div className=\"bx--form__helper-text\" style={{maxWidth: '100%'}}>\r\n                            You're already signed in.\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n        )   \r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n      busy: state.busy,\r\n      user: state.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        login: async(email, password) => {\r\n            dispatch(await setBusy());\r\n            dispatch(await loginUser(email, password));\r\n        }\r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Splash);","import React from 'react';\r\nimport {\r\n    Tile\r\n} from 'carbon-components-react';\r\n\r\nexport default class Card extends React.Component {\r\n    render(){\r\n        return(\r\n            <Tile>\r\n                <Tile>{this.props.header}</Tile>\r\n                <Tile>{this.props.children}</Tile>\r\n                <Tile>{this.props.footer}</Tile>\r\n            </Tile>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Card from '../components/Card';\r\nimport {\r\n    Row, Column\r\n} from 'carbon-components-react';\r\n\r\nexport default class Dashboard extends React.Component {\r\n    render(){\r\n        return(\r\n            <Row>\r\n                <Column>\r\n                <Card header=\"Weather Report\">Card1</Card>\r\n                </Column>\r\n                <Column>\r\n                <Card header=\"Soil Report\">Card2</Card>\r\n                </Column>\r\n            </Row>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Chat extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>Chat</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class FAQ extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>FAQ</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Recovery extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>Recovery</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport {\r\n    Grid,\r\n    Row,\r\n    Column,\r\n    DataTable,\r\n    Button,\r\n    Select,\r\n    SelectItem,\r\n    Form,\r\n    Loading\r\n} from 'carbon-components-react'; \r\nimport { getLocation, getFields, getCrops, newCrop, newField, deleteField, deleteCrop, setBusy } from '../Actions';\r\nimport { connect } from 'react-redux';\r\nimport Map from 'pigeon-maps';\r\nimport TrashCan20 from \"@carbon/icons-react/lib/trash-can/20\";\r\nimport Add20 from \"@carbon/icons-react/lib/add/20\";\r\nconst cropsDetails = require('../brain.json');\r\nconst {\r\n    TableContainer,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableBody,\r\n    TableCell,\r\n    TableHeader,\r\n} = DataTable; \r\n\r\nclass Configure extends React.Component{\r\n    state = {\r\n        selectedCrop: 'FR01',\r\n        fieldGeoJSON: {},\r\n        fieldName: Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\r\n    }\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.props.retrieveLocation();\r\n        console.log(this.props.location);\r\n        this.props.retrieveCrops(this.props.user.email);\r\n        this.props.retrieveFields(this.props.user.email);\r\n    }\r\n\r\n    _handleChangeCropSelection = (evt) => {\r\n        this.setState({selectedCrop: evt.target.value});\r\n    }\r\n\r\n    _handleAddCrop = async(evt) => {\r\n        let crop = cropsDetails.filter((crop) => {\r\n            return crop.cropId===this.state.selectedCrop;\r\n        });\r\n        await this.props.addCrop(this.props.user.email, this.state.selectedCrop, crop[0].name);\r\n    }\r\n\r\n    _handleAddField = async() => {\r\n        await this.props.addField(this.props.user.email, this.state.fieldGeoJSON);\r\n    }\r\n\r\n    deleteField = async(fieldId) => {\r\n        await this.props.removeField(this.props.user.email, fieldId);\r\n    }\r\n\r\n    deleteCrop = async(cropId) => {\r\n        await this.props.removeCrop(this.props.user.email, cropId);\r\n    }\r\n\r\n    provider = {\r\n        osm: (x, y, z) => {\r\n            const s = String.fromCharCode(97 + (x + y + z) % 3)\r\n            return `https://${s}.tile.openstreetmap.org/${z}/${x}/${y}.png`\r\n        },\r\n        wikimedia: (x, y, z, dpr) => {\r\n            return `https://maps.wikimedia.org/osm-intl/${z}/${x}/${y}${dpr >= 2 ? '@2x' : ''}.png`\r\n        },\r\n        stamen: (x, y, z, dpr) => {\r\n            return `https://stamen-tiles.a.ssl.fastly.net/terrain/${z}/${x}/${y}${dpr >= 2 ? '@2x' : ''}.jpg`\r\n        }\r\n    }\r\n\r\n    _handleMapBoundChange = (data) => {\r\n        let ne = [data.bounds.ne[1], data.bounds.ne[0]];\r\n        let sw = [data.bounds.sw[1], data.bounds.sw[0]];\r\n        let nw = [sw[0], ne[1]];\r\n        let se = [ne[0], sw[1]];\r\n        let format = {\r\n            \"name\": this.state.fieldName,\r\n            \"geo_json\": {\r\n                \"type\": \"FeatureCollection\",\r\n                \"features\": [\r\n                    {\r\n                        \"type\": \"Feature\",\r\n                        \"properties\": {},\r\n                        \"geometry\": {\r\n                            \"type\": \"Polygon\",\r\n                            \"coordinates\": [\r\n                                [\r\n                                    sw,\r\n                                    se,\r\n                                    ne,\r\n                                    nw,\r\n                                    sw,\r\n                                ]\r\n                            ]\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n        this.setState({fieldGeoJSON: format});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Grid>\r\n                {this.props.busy?<Loading withOverlay={true} active={this.props.busy}/>:<></>}\r\n                <Row>\r\n                    <h2 style={{width: '100%', textAlign: 'center'}}>Fields Section</h2>\r\n                </Row>\r\n                <br/>\r\n                <Row>\r\n                    <Column sm={4} lg={6} style={{textAlign: 'center'}}>\r\n                        <Map center={this.props.location} animate={true} zoom={12} height={300} onBoundsChanged={this._handleMapBoundChange} provider={this.provider['wikimedia']} />\r\n                        <div className=\"bx--form__helper-text\" style={{maxWidth: '100%'}}>\r\n                            Zoom to your fields (1 Ha to 3000 Ha) and click on button below.\r\n                        </div>\r\n                        <Button renderIcon={Add20} onClick={this._handleAddField}>\r\n                            Add\r\n                        </Button>\r\n                    </Column>\r\n                    <Column sm={4} lg={6}>\r\n                        <TableContainer title=\"Your Fields\">\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableHeader key=\"fieldId\">\r\n                                            Field Id\r\n                                        </TableHeader>\r\n                                        <TableHeader key=\"fieldLoc\">\r\n                                            Field Location\r\n                                        </TableHeader>\r\n                                        <TableHeader key=\"delete\">\r\n\r\n                                        </TableHeader>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {\r\n                                        this.props.fields.length?\r\n                                        this.props.fields.map(field => {\r\n                                            let seperator = field.fieldResId.lastIndexOf(\":\");\r\n                                            let id = field.fieldResId.substring(seperator+1);\r\n                                            let pt1 = field.data.geo_json.features[0].geometry.coordinates[0][0];\r\n                                            let pt2 = field.data.geo_json.features[0].geometry.coordinates[0][2];\r\n                                            return (\r\n                                            <TableRow key={field.fieldResId}>\r\n                                                <TableCell>\r\n                                                    {id}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {pt1[0]+\"\\n\"+pt1[1]+\"\\n\"+pt2[0]+\"\\n\"+pt2[1]}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <Button \r\n                                                        kind=\"ghost\"\r\n                                                        tabIndex={0}\r\n                                                        hasonlyicon=\"true\"\r\n                                                        renderIcon={TrashCan20}\r\n                                                        iconDescription=\"Delete\"\r\n                                                        onClick={() => {this.deleteField(id)}}\r\n                                                    />\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                            )\r\n                                        }):\r\n                                        <TableRow>\r\n                                            <TableCell colspan={3}>\r\n                                                No fields yet\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    }\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Column>\r\n                </Row>\r\n                <br/>\r\n                <Row>\r\n                    <h2 style={{width: '100%', textAlign: 'center'}}>Crops Section</h2>\r\n                </Row>\r\n                <br/>\r\n                <Row>\r\n                    <Column sm={4} lg={6}>\r\n                        <Form>\r\n                            <Select\r\n                                id=\"crop-selector\"\r\n                                helperText=\"Select crop to add\"\r\n                                labelText=\"Crop\"\r\n                                inline={false}\r\n                                defaultValue={this.state.selectedCrop}\r\n                                onChange={this._handleChangeCropSelection}\r\n                            >\r\n                                {\r\n                                    cropsDetails.map(crop => {\r\n                                        return(\r\n                                            <SelectItem key={crop.cropId} text={crop.name} value={crop.cropId} />\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Select>\r\n                            <br />\r\n                            <Button\r\n                                renderIcon={Add20}\r\n                                onClick={this._handleAddCrop}\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                        </Form>\r\n                    </Column>\r\n                    <Column sm={4} lg={6}>\r\n                        <TableContainer>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableHeader key=\"cropId\">\r\n                                            Crop Id\r\n                                        </TableHeader>\r\n                                        <TableHeader key=\"cropName\">\r\n                                            Crop Name\r\n                                        </TableHeader>\r\n                                        <TableHeader key=\"delete\">\r\n\r\n                                        </TableHeader>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {\r\n                                        this.props.crops.length?\r\n                                        this.props.crops.map(crop => {\r\n                                            return (\r\n                                                <TableRow key={crop.cropId}>\r\n                                                    <TableCell>\r\n                                                        {crop.cropId}\r\n                                                    </TableCell>\r\n                                                    <TableCell>\r\n                                                        {crop.name}\r\n                                                    </TableCell>\r\n                                                    <TableCell>\r\n                                                        <Button\r\n                                                            kind=\"ghost\"\r\n                                                            tabIndex={0}\r\n                                                            hasonlyicon=\"true\"\r\n                                                            renderIcon={TrashCan20}\r\n                                                            iconDescription=\"Delete\"\r\n                                                            onClick={() => {this.deleteCrop(crop.cropId)}}\r\n                                                        />\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            )\r\n                                        }):\r\n                                        <TableRow>\r\n                                            <TableCell colspan={3}>\r\n                                                No crops yet\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    }\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Column>\r\n                </Row>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        user: state.user,\r\n        fields: state.fields,\r\n        crops: state.crops,\r\n        last: state.last,\r\n        busy: state.busy,\r\n        location: state.location\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addCrop: async(owner, cropId, name) => {\r\n            dispatch(await setBusy());\r\n            dispatch(await newCrop(owner, cropId, name))\r\n        },\r\n        removeCrop: async(owner, cropId) => {\r\n            dispatch(await setBusy());\r\n            dispatch(await deleteCrop(owner, cropId));\r\n        },\r\n        addField: async(owner, data) => {\r\n            dispatch(await setBusy());\r\n            dispatch(await newField(owner, data));\r\n        },\r\n        removeField: async(owner, fieldId) => {\r\n            dispatch(await setBusy());\r\n            dispatch(await deleteField(owner, fieldId));\r\n        },\r\n        retrieveCrops: async(email) => {\r\n            dispatch(await setBusy());\r\n            dispatch(await getCrops(email));\r\n        },\r\n        retrieveFields: async(email) => {\r\n            dispatch(await setBusy());\r\n            dispatch(await getFields(email));\r\n        },\r\n        retrieveLocation: async() => {\r\n            dispatch(await setBusy());\r\n            dispatch(await getLocation());\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Configure);","import React from 'react';\r\nimport {\r\n    Grid,\r\n    Column,\r\n    Row\r\n} from 'carbon-components-react/lib/components/Grid';\r\n\r\nexport default class Content extends React.Component {\r\n    render(){\r\n        return(\r\n            <Grid>\r\n                <Row>\r\n                    <Column>\r\n                        {\r\n                            this.props.children\r\n                        }\r\n                    </Column>\r\n                </Row>\r\n            </Grid>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport AppLayout from './components/AppLayout';\nimport Splash from './pages/Splash';\nimport Dashboard from './pages/Dashboard';\nimport Chat from './pages/Chat';\nimport FAQ from './pages/FAQ';\nimport Recovery from './pages/Recovery';\nimport Configure from './pages/Configure';\nimport Content from './components/Content';\nimport './App.css';\nimport { Route, HashRouter } from 'react-router-dom';\n\nclass App extends React.Component {\n  render(){\n    return (\n      <>\n        <AppLayout >\n          <HashRouter>\n            <Content>\n              <Route exact path=\"/\" render={() => <Splash />}></Route>\n              <Route exact path=\"/home\" render={() => <Splash />}></Route>\n              <Route path=\"/dashboard\" render={() => <Dashboard/>}></Route>\n              <Route path=\"/chat\" render={() => <Chat/>}></Route>\n              <Route path=\"/faq\" render={() => <FAQ/>}></Route>\n              <Route path=\"/recovery\" render={() => <Recovery/>}></Route>\n              <Route path=\"/configure\" render={() => <Configure />}></Route>\n            </Content>\n          </HashRouter>\n        </AppLayout>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'carbon-components/css/carbon-components.css';\nimport store from './Store';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { saveState } from './localStorage';\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}