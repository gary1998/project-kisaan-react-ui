{"version":3,"sources":["Store.js","localStorage.js","Reducer.js","Actions.js","components/TaskBar.js","pages/Splash.js","pages/Dashboard.js","pages/Chat.js","pages/FAQ.js","pages/Recovery.js","pages/Configure.js","App.js","serviceWorker.js","index.js"],"names":["enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","state","action","type","alert","user","payload","fields","crops","concat","filter","field","fieldResId","crop","cropId","serverURL","apiURL","loginUser","email","password","a","variables","fetch","method","headers","body","stringify","query","then","data","json","login","catch","console","log","getFields","getCrops","newCrop","owner","name","cropResId","resp","createCrop","newField","addFieldToAgro","id","geo_json","features","properties","createField","deleteField","deleteFieldFromAgro","removeField","deleteCrop","removeCrop","fieldData","Promise","resolve","reject","ok","statusText","fieldId","TaskBar","_handleLogout","setItem","dispatch","className","href","alt","src","to","this","props","onClick","React","Component","connect","Splash","busy","_handleLoginSubmit","evt","preventDefault","setState","count","_handleEmailChange","target","value","_handlePasswordChange","time","setTimeout","photo","htmlFor","readOnly","onSubmit","onChange","placeholder","required","aria-hidden","Dashboard","Chat","FAQ","Recovery","cropsDetails","require","Configure","busyAddingCrop","busyDeletingCrop","busyAddingField","busyDeletingField","selectedCrop","fieldGeoJSON","fieldName","Math","random","toString","substring","_handleChangeCropSelection","_handleAddCrop","addCrop","_handleAddField","addField","provider","osm","x","y","z","s","String","fromCharCode","wikimedia","dpr","stamen","_handleMapBoundChange","ne","bounds","sw","nw","se","format","retrieveCrops","retrieveFields","center","animate","zoom","height","onBoundsChanged","length","map","seperator","lastIndexOf","pt1","geometry","coordinates","pt2","key","colSpan","last","App","exact","path","render","Boolean","location","hostname","match","subscribe","saveState","getState","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b1d6d5ad.chunk.js","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { reducer } from './Reducer';\r\nimport { loadState } from './localStorage';\r\n\r\nconst composeEnhancers = typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\nconst enhancer = composeEnhancers(\r\n  applyMiddleware(thunk),\r\n);\r\nconst persistedState = loadState() || {};\r\nconst store = createStore(reducer, persistedState, enhancer);\r\n\r\nexport default store;","export const loadState = () => {\r\n    try{\r\n        const serializedState = localStorage.getItem('projectkisaanstate');\r\n        if(serializedState === null){\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch(err){\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport const saveState = (state) => {\r\n    try{\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('projectkisaanstate', serializedState);\r\n    } catch(err){\r\n        console.log(err);\r\n    }\r\n}","export const reducer = (state, action) => {\r\n    switch(action.type) {\r\n        case \"LOGIN_FAILED\": {\r\n            alert('No such user found. Check your email and password again.');\r\n            return {\r\n                ...state,\r\n                user: \"\"\r\n            };\r\n        }\r\n        case \"LOGIN_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                user: action.payload\r\n            }\r\n        }\r\n        case \"LOGOUT\": {\r\n            return {\r\n                ...state,\r\n                user: \"\"\r\n            };\r\n        }\r\n        case \"FIELDS_RETRIEVAL_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                fields: action.payload\r\n            }\r\n        }\r\n        case \"FIELDS_RETRIEVAL_FAILED\": {\r\n            return state;\r\n        }\r\n        case \"CROPS_RETRIEVAL_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                crops: action.payload\r\n            }\r\n        }\r\n        case \"CROPS_RETRIEVAL_FAILED\": {\r\n            return state;\r\n        }\r\n        case \"FIELD_ADD_SUCCESS\": {\r\n            let fields = state.fields.concat(action.payload);\r\n            return {\r\n                ...state,\r\n                fields\r\n            }\r\n        }\r\n        case \"FIELD_ADD_FAILED\": {\r\n            return state;\r\n        }\r\n        case \"CROP_ADD_SUCCESS\": {\r\n            let crops = state.crops.concat(action.payload);\r\n            return {\r\n                ...state,\r\n                crops\r\n            }\r\n        }\r\n        case \"CROP_ADD_FAILED\": {\r\n            return state;\r\n        }\r\n        case \"FIELD_REMOVAL_SUCCESS\": {\r\n            let fields = state.fields.filter(field => {\r\n                return field.fieldResId!==action.payload\r\n            });\r\n            return {\r\n                ...state,\r\n                fields\r\n            }\r\n        }\r\n        case \"FIELD_REMOVAL_FAILED\": {\r\n            return state;\r\n        }\r\n        case \"CROP_REMOVAL_SUCCESS\": {\r\n            let crops = state.crops.filter(crop => {\r\n                return crop.cropId!==action.payload\r\n            });\r\n            return {\r\n                ...state,\r\n                crops\r\n            }\r\n        }\r\n        case \"CROP_REMOVAL_FAILED\": {\r\n            return state;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","const serverURL= \"https://project-kisaan-graphql-server.herokuapp.com/graphql\";\r\nconst apiURL = \"http://api.agromonitoring.com/agro/1.0/polygons\";\r\n\r\nexport const loginUser = async(email, password) => {\r\n    let query = `query login($email: String, $password: String){login(email: $email, password: $password){name photo email}}`;\r\n    let variables = { email, password };\r\n\r\n    return user => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.login){\r\n                user({\r\n                    type: \"LOGIN_SUCCESS\",\r\n                    payload: body.data.login\r\n                });\r\n            } else {\r\n                user({\r\n                    type: \"LOGIN_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log('error while loggin in', err);\r\n            user({\r\n                type: \"LOGIN_FAILED\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const logoutUser = () => {\r\n    return user => {\r\n        user({\r\n            type: \"LOGOUT\",\r\n        })\r\n    }\r\n}\r\n\r\nexport const getFields = async(email) => {\r\n    let query = `query fields($email: String){fields(email: $email){fieldResId data{name geo_json{features{geometry{coordinates}}}}}}`;\r\n    let variables = { email };\r\n    return fields => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.fields){\r\n                fields({\r\n                    type: \"FIELDS_RETRIEVAL_SUCCESS\",\r\n                    payload: body.data.fields\r\n                });\r\n            } else {\r\n                fields({\r\n                    type: \"FIELDS_RETRIEVAL_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log('error while retrieving fields', err);\r\n            fields({\r\n                type: \"FIELDS_RETRIEVAL_FAILED\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const getCrops = async(email) => {\r\n    let query = `query crops($email: String){crops(email: $email){cropId name cropResId}}`;\r\n    let variables = { email };\r\n    return crops => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.crops){\r\n                crops({\r\n                    type: \"CROPS_RETRIEVAL_SUCCESS\",\r\n                    payload: body.data.crops\r\n                });\r\n            } else {\r\n                crops({\r\n                    type: \"CROPS_RETRIEVAL_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log('error while retrieving crops', err);\r\n            crops({\r\n                type: \"CROPS_RETRIEVAL_FAILED\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const newCrop = async(owner, cropId, name) => {\r\n    let query = `mutation addCrop($owner: String, $cropId: String, $cropResId: String, $name: String){createCrop(owner: $owner, cropId: $cropId, name: $name, cropResId: $cropResId){cropResId cropId}}`;\r\n    let cropResId = `${owner}:crops:${cropId}`;\r\n    let variables = { cropId, name, owner, cropResId};\r\n    return resp => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.createCrop.cropId){\r\n                resp({\r\n                    type: \"CROP_ADD_SUCCESS\",\r\n                    payload: {\r\n                        cropId, name\r\n                    }\r\n                });\r\n            } else {\r\n                resp({\r\n                    type: \"CROP_ADD_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log('error while adding crop', err);\r\n            resp({\r\n                type: \"CROP_ADD_FAILED\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const newField = async(owner, data) => {\r\n    return resp => {\r\n        addFieldToAgro(data).then(body => {\r\n            let fieldResId = `${owner}:fields:${body.id}`;\r\n            let query = `mutation addField($owner: String, $data: FieldInputData, $fieldResId: String){createField(owner: $owner, data: $data, fieldResId: $fieldResId){fieldResId data{name geo_json{features{geometry{coordinates}}}}}}`;\r\n            delete data.geo_json.features[0].properties;\r\n            let variables = { fieldResId, owner, data };\r\n            fetch(serverURL, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ query, variables })\r\n            }).then(data => {\r\n                return data.json();\r\n            }).then(body => {\r\n                if(body.data.createField.data){\r\n                    resp({\r\n                        type: \"FIELD_ADD_SUCCESS\",\r\n                        payload: body.data.createField\r\n                    });\r\n                } else {\r\n                    resp({\r\n                        type: \"FIELD_ADD_FAILED\"\r\n                    });\r\n                }\r\n            }).catch(err => {\r\n                console.log('error while adding field to db', err);\r\n                resp({\r\n                    type: \"FIELD_ADD_FAILED\"\r\n                });\r\n            });\r\n        }).catch(err => {\r\n            console.log('error while adding field to api', err);\r\n            resp({\r\n                type: \"FIELD_ADD_FAILED\"\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteField = async(owner, id) => {\r\n    return resp => {\r\n        deleteFieldFromAgro(id).then(() => {\r\n            let query = `mutation deleteField($fieldResId: String){removeField(fieldResId: $fieldResId)}`;\r\n            let fieldResId = `${owner}:fields:${id}`;\r\n            let variables = { fieldResId };\r\n            fetch(serverURL, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ query, variables })\r\n            }).then(data => {\r\n                return data.json();\r\n            }).then(body => {\r\n                if(body.data.removeField){\r\n                    resp({\r\n                        type: \"FIELD_REMOVAL_SUCCESS\",\r\n                        payload: fieldResId\r\n                    });\r\n                } else {\r\n                    resp({\r\n                        type: \"FIELD_REMOVAL_FAILED\"\r\n                    });\r\n                }\r\n            }).catch(err => {\r\n                console.log('error while deleting field', err);\r\n            });\r\n        }).catch(err => {\r\n            console.log('error while deleting field from api', err);\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteCrop = async(owner, cropId) => {\r\n    let query = `mutation deleteCrop($cropResId: String){removeCrop(cropResId: $cropResId)}`;\r\n    let cropResId = `${owner}:crops:${cropId}`;\r\n    let variables = { cropResId };\r\n    return resp => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.removeCrop){\r\n                resp({\r\n                    type: \"CROP_REMOVAL_SUCCESS\",\r\n                    payload: cropId\r\n                });\r\n            } else {\r\n                resp({\r\n                    type: \"CROP_REMOVAL_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log('error while deleting crop', err);\r\n        });\r\n    }\r\n}\r\n\r\nconst addFieldToAgro = (fieldData) => {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(`${apiURL}?appid=83e9d92cb19c29c0045da2e0282321f5`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(fieldData)\r\n        }).then(data => {\r\n            if(data.ok){\r\n                return data.json()\r\n            } else {\r\n                console.log('error while adding field to agro', data.statusText);\r\n                reject(data.statusText);\r\n            }\r\n        }).then(body => {\r\n            resolve(body);\r\n        })\r\n    })\r\n}\r\n\r\nconst deleteFieldFromAgro = (fieldId) => {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(`${apiURL}/${fieldId}?appid=83e9d92cb19c29c0045da2e0282321f5`, {\r\n            method: 'DELETE'\r\n        }).then(data => {\r\n            if(data.ok){\r\n                resolve()\r\n            } else {\r\n                console.log('error while deleting field from agro', data.statusText);\r\n                reject(data.statusText);\r\n            }\r\n        })\r\n    })\r\n}","import React from 'react';\r\nimport {\r\n  Link,\r\n  HashRouter\r\n} from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport { logoutUser } from '../Actions';\r\nimport store from '../Store';\r\n\r\nclass TaskBar extends React.Component {\r\n\r\n  _handleLogout = () => {\r\n    localStorage.setItem('projectkisaanstate', '');\r\n    store.dispatch(logoutUser());\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <>\r\n        <div className=\"header\">\r\n          <div className=\"home-menu pure-menu pure-menu-horizontal pure-menu-fixed pure-menu-scrollable\">\r\n              <a className=\"pure-menu-heading\" href=\"#\"><img alt=\"Logo\" src=\"img/logo-16.png\"/>&nbsp;<strong>Project Kisaan</strong> - Team EDGE</a>\r\n              <ul className=\"pure-menu-list\">\r\n                <HashRouter>\r\n                  <li className=\"pure-menu-item pure-menu-selected\"><Link to=\"/\" className=\"pure-menu-link\">Home</Link></li>\r\n                  {this.props.user?<><li className=\"pure-menu-item\"><Link to=\"/dashboard\" className=\"pure-menu-link\">Dashboard</Link></li><li className=\"pure-menu-item\"><Link to=\"/chat\" className=\"pure-menu-link\">Chat</Link></li><li className=\"pure-menu-item\"><Link to=\"/configure\" className=\"pure-menu-link\">Configure</Link></li></>:\"\"}\r\n                  <li className=\"pure-menu-item\"><Link to=\"/faq\" className=\"pure-menu-link\">Assistance/FAQs</Link></li>\r\n                </HashRouter>\r\n              </ul>\r\n          </div>\r\n        </div>\r\n          <div className=\"footer l-box is-center\">\r\n            {!this.props.user?<>You're not logged in.</>:<>Welcome {this.props.user.name} ({this.props.user.email}). Click here to <a href=\"#\" onClick={this._handleLogout}>logout</a></>}\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n  return {\r\n    user: state.user\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TaskBar);\r\n","import React from 'react';\r\nimport store from '../Store';\r\nimport { loginUser } from '../Actions';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Splash extends React.Component {\r\n    state = {\r\n        email: \"\",\r\n        password: \"\",\r\n        busy: false,\r\n    }\r\n    _handleLoginSubmit = async(evt) => {\r\n        evt.preventDefault();\r\n        this.setState({busy: true});\r\n        store.dispatch(await loginUser(this.state.email, this.state.password));\r\n        await this.count(1000);\r\n        this.setState({busy: false, email: \"\", password: \"\"});\r\n    }\r\n    _handleEmailChange = (evt) => {\r\n        this.setState({email: evt.target.value});\r\n    }\r\n    _handlePasswordChange = (evt) => {\r\n        this.setState({password: evt.target.value});\r\n    }\r\n    count = async(time) => {\r\n        return new Promise(resolve => {\r\n            setTimeout(() => {\r\n                resolve();\r\n            }, time);\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <>\r\n                <div className=\"splash-container\">\r\n                    <div className=\"splash\">\r\n                        <h1 className=\"splash-head\"><img alt=\"Splash\" src=\"img/logo-128.png\"/></h1>\r\n                        <div className=\"splash-subhead\">\r\n                            <strong>Project Kisaan</strong>, because everyone is a farmer by heart.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"content-wrapper\">\r\n                    <div className=\"content\">\r\n                        <h2 className=\"content-head is-center\">Features</h2>\r\n                        <div className=\"pure-g\">\r\n                            <div className=\"l-box pure-u-1 pure-u-md-1-2 pure-u-lg-1-4\">\r\n                                <h3 className=\"content-subhead\">\r\n                                    <i className=\"fa fa-cogs\"></i>\r\n                                    IoT Based\r\n                                </h3>\r\n                                <p>\r\n                                    AgriBot is a IoT based robot which keeps an eye over your fields and crops and keeps you updated.\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"l-box pure-u-1 pure-u-md-1-2 pure-u-lg-1-4\">\r\n                                <h3 className=\"content-subhead\">\r\n                                    <i className=\"fa fa-users\"></i>\r\n                                    User Friendly\r\n                                </h3>\r\n                                <p>(\r\n                                    The AgriBot and Project Kisaan web application requires almost negligible input which makes it very user friendly.\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"l-box pure-u-1 pure-u-md-1-2 pure-u-lg-1-4\">\r\n                                <h3 className=\"content-subhead\">\r\n                                    <i className=\"fa fa-eye\"></i>\r\n                                    Crop Saviour\r\n                                </h3>\r\n                                <p>\r\n                                    AgriBot comes with a rotatable high-res camera which enables it to detect insects and diseases very accurately.\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"l-box pure-u-1 pure-u-md-1-2 pure-u-lg-1-4\">\r\n                                <h3 className=\"content-subhead\">\r\n                                    <i className=\"fa fa-info\"></i>\r\n                                    Lifetime Assistance\r\n                                </h3>\r\n                                <p>\r\n                                    Project Kisaan team would be very happy to help you anytime anywhere until it's alive.\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <h2 className=\"content-head is-center\">{!this.props.user?\"Login to continue...\":\"More information...\"}</h2>\r\n                        <div className=\"pure-g\">\r\n                            <div className=\"l-box-lrg pure-u-1 pure-u-md-2-5\">\r\n                                {\r\n                                    !this.props.user?\r\n                                    <form className=\"pure-form pure-form-stacked\" onSubmit={this._handleLoginSubmit}>\r\n                                        <fieldset>\r\n                                            <label htmlFor=\"email\">Your Email</label>\r\n                                            <input id=\"email\" type=\"email\" value={this.state.email} onChange={this._handleEmailChange} placeholder=\"mark@example.com\" required/>\r\n                                            <label htmlFor=\"password\">Your Password</label>\r\n                                            <input id=\"password\" type=\"password\" value={this.state.password} onChange={this._handlePasswordChange} placeholder=\"*****\" required/>\r\n                                            {\r\n                                                this.state.busy?\r\n                                                <button type=\"submit\" className=\"pure-button pure-button-disabled\">\r\n                                                    <i className=\"fa fa-spin fa-spinner\" aria-hidden=\"true\" />&nbsp;Wait\r\n                                                </button>:\r\n                                                <button type=\"submit\" className=\"pure-button\">\r\n                                                    Login\r\n                                                </button>\r\n                                            }\r\n                                        </fieldset>\r\n                                        <p>Trouble logging in? <Link to=\"/recovery\">Help</Link></p>\r\n                                    </form>:\r\n                                    <form className=\"pure-form pure-form-stacked\">\r\n                                        <div className=\"avatar-container\">\r\n                                            <img src={this.props.user.photo} className=\"avatar\" alt=\"Avatar\"></img>\r\n                                        </div>\r\n                                        <fieldset>\r\n                                            <label htmlFor=\"email\">Your Email</label>\r\n                                            <input id=\"email\" type=\"email\" value={this.props.user.email} readOnly/>\r\n                                            <label htmlFor=\"name\">Your Name</label>\r\n                                            <input id=\"name\" type=\"text\" value={this.props.user.name} readOnly/>\r\n                                        </fieldset>\r\n                                    </form>\r\n                                }\r\n                            </div>\r\n                            <div className=\"l-box-lrg pure-u-1 pure-u-md-3-5\">\r\n                                <h4>Contact Us</h4>\r\n                                <p>\r\n                                    Our team is there to help you 24x7. You can clear your questions or doubts in our <a href=\"#\">Assistance/FAQs</a> section.\r\n                                    More more information, you can mail us at <a href=\"mailto:help.projectkisaan@mail.com\">help.projectkisaan@mail.com</a>.\r\n                                </p>\r\n                                <h4>Interested in AgriBot?</h4>\r\n                                <p>\r\n                                    You can express your interest for purchasing AgriBot by writing to us at <a href=\"mailto:purchase.projectkisaan@mail.com\">purchase.projectkisaan@mail.com</a>.\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )   \r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n      user: state.user\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Splash);","import React from 'react';\r\n\r\nexport default class Dashboard extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>Dashboard</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Chat extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>Chat</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class FAQ extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>FAQ</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Recovery extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>Recovery</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { getFields, getCrops, newCrop, newField, deleteField, deleteCrop } from '../Actions';\r\nimport { connect } from 'react-redux';\r\nimport Map from 'pigeon-maps';\r\nconst cropsDetails = require('../brain.json');\r\n\r\nclass Configure extends React.Component{\r\n    state = {\r\n        busyAddingCrop: false,\r\n        busyDeletingCrop: false,\r\n        busyAddingField: false,\r\n        busyDeletingField: false,\r\n        selectedCrop: 'FR01',\r\n        fieldGeoJSON: {},\r\n        fieldName: Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\r\n    }\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.props.retrieveCrops(this.props.user.email);\r\n        this.props.retrieveFields(this.props.user.email);\r\n    }\r\n\r\n    _handleChangeCropSelection = (evt) => {\r\n        this.setState({selectedCrop: evt.target.value});\r\n    }\r\n\r\n    _handleAddCrop = async(evt) => {\r\n        evt.preventDefault();\r\n        this.setState({busyAddingCrop: true});\r\n        await this.count(5000);\r\n        let crop = cropsDetails.filter((crop) => {\r\n            return crop.cropId===this.state.selectedCrop;\r\n        });\r\n        await this.props.addCrop(this.props.user.email, this.state.selectedCrop, crop[0].name);\r\n        this.setState({busyAddingCrop: false});\r\n    }\r\n\r\n    _handleAddField = async() => {\r\n        this.setState({busyAddingField: true});\r\n        await this.count(6500);\r\n        await this.props.addField(this.props.user.email, this.state.fieldGeoJSON);\r\n        this.setState({busyAddingField: false});\r\n    }\r\n\r\n    deleteField = async(fieldId) => {\r\n        this.setState({busyDeletingField: true});\r\n        await this.count(5000);\r\n        await this.props.removeField(this.props.user.email, fieldId);\r\n        this.setState({busyDeletingField: false});\r\n    }\r\n\r\n    deleteCrop = async(cropId) => {\r\n        this.setState({busyDeletingCrop: true});\r\n        await this.count(5000);\r\n        await this.props.removeCrop(this.props.user.email, cropId);\r\n        this.setState({busyDeletingCrop: false});\r\n    }\r\n\r\n    count = async(time) => {\r\n        return new Promise(resolve => {\r\n            setTimeout(() => {\r\n                resolve();\r\n            }, time);\r\n        })\r\n    }\r\n\r\n    provider = {\r\n        osm: (x, y, z) => {\r\n            const s = String.fromCharCode(97 + (x + y + z) % 3)\r\n            return `https://${s}.tile.openstreetmap.org/${z}/${x}/${y}.png`\r\n        },\r\n        wikimedia: (x, y, z, dpr) => {\r\n            return `https://maps.wikimedia.org/osm-intl/${z}/${x}/${y}${dpr >= 2 ? '@2x' : ''}.png`\r\n        },\r\n        stamen: (x, y, z, dpr) => {\r\n            return `https://stamen-tiles.a.ssl.fastly.net/terrain/${z}/${x}/${y}${dpr >= 2 ? '@2x' : ''}.jpg`\r\n        }\r\n    }\r\n\r\n    _handleMapBoundChange = (data) => {\r\n        let ne = data.bounds.ne;\r\n        let sw = data.bounds.sw;\r\n        let nw = [sw[0], ne[1]];\r\n        let se = [ne[0], sw[1]];\r\n        let format = {\r\n            \"name\": this.state.fieldName,\r\n            \"geo_json\": {\r\n                \"type\": \"FeatureCollection\",\r\n                \"features\": [\r\n                    {\r\n                        \"type\": \"Feature\",\r\n                        \"properties\": {},\r\n                        \"geometry\": {\r\n                            \"type\": \"Polygon\",\r\n                            \"coordinates\": [\r\n                                [\r\n                                    sw,\r\n                                    se,\r\n                                    ne,\r\n                                    nw,\r\n                                    sw,\r\n                                ]\r\n                            ]\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n        this.setState({fieldGeoJSON: format});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"configure-container\">\r\n                <div id=\"fieldsSection\">\r\n                    <label>Fields Section</label>\r\n                    <div className=\"pure-g\">\r\n                        <div className=\"l-box-lrg pure-u-1 pure-u-md-1-2 map\">\r\n                            <Map center={[28.946755, 77.726754]} animate={true} zoom={12} height={300} onBoundsChanged={this._handleMapBoundChange} provider={this.provider['osm']} />\r\n                            <span className=\"pure-form-message\">Zoom to your fields (maximum 3000 Ha) and click on button below.</span>\r\n                            {\r\n                                this.state.busyAddingField?<button className=\"pure-button pure-button-disabled\"><i className=\"fa fa-spin fa-spinner\"/>&nbsp;Wait</button>:<button className=\"pure-button\" onClick={this._handleAddField}>Add Field</button>\r\n                            }\r\n                        </div>\r\n                        <div className=\"l-box-lrg pure-u-1 pure-u-md-1-2\">\r\n                            <table className=\"pure-table pure-table-bordered\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Field Id</th>\r\n                                        <th>Field Location</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        this.props.fields.length?\r\n                                        this.props.fields.map(field => {\r\n                                            let seperator = field.fieldResId.lastIndexOf(\":\");\r\n                                            let id = field.fieldResId.substring(seperator+1);\r\n                                            let pt1 = field.data.geo_json.features[0].geometry.coordinates[0][0];\r\n                                            let pt2 = field.data.geo_json.features[0].geometry.coordinates[0][2];\r\n                                            return(\r\n                                                <tr key={field.fieldResId}>\r\n                                                    <td>{id}</td>\r\n                                                    <td>{pt1[0]+\"\\n\"+pt1[1]+\"\\n\"+pt2[0]+\"\\n\"+pt2[1]}</td>\r\n                                                    <td>{this.state.busyDeletingField?<i className=\"fa pure-button-disabled fa-trash-o\"/>:<i onClick={() => this.deleteField(id)} className=\"deleteIcon fa fa-trash-o\"/>}</td>\r\n                                                </tr>\r\n                                            )\r\n                                        })\r\n                                        :\r\n                                        <tr>\r\n                                            <td colSpan={3}>No fields yet.</td>\r\n                                        </tr>\r\n                                    }\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <section id=\"cropsSection\">\r\n                    <label>Crops Section</label>\r\n                    <div className=\"pure-g\">\r\n                        <div className=\"l-box-lrg pure-u-1 pure-u-md-1-2\">\r\n                            <form className=\"pure-form\" onSubmit={this._handleAddCrop}>\r\n                                <fieldset>\r\n                                    <select id=\"state\" value={this.state.selectedCrop} onChange={this._handleChangeCropSelection}>\r\n                                        {\r\n                                            cropsDetails.map(crop => {\r\n                                                return (\r\n                                                    <option key={crop.cropId} value={crop.cropId}>{crop.name}</option>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </select>\r\n                                    &nbsp;\r\n                                    {!this.state.busyAddingCrop?\r\n                                    <button type=\"submit\" className=\"pure-button\">\r\n                                        Add Crop\r\n                                    </button>:\r\n                                    <button type=\"submit\" className=\"pure-button pure-button-disabled\">\r\n                                        <i className=\"fa fa-spin fa-spinner\"/>&nbsp;Wait\r\n                                    </button>}\r\n                                </fieldset>\r\n                            </form>\r\n                        </div>\r\n                        <div className=\"l-box-lrg pure-u-1 pure-u-md-1-2\">\r\n                            <table className=\"pure-table pure-table-bordered\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Crop Id</th>\r\n                                        <th>Crop Name</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        this.props.crops.length?this.props.crops.map(crop => {\r\n                                            return(\r\n                                                <tr key={crop.cropId}>\r\n                                                    <td>{crop.cropId}</td>\r\n                                                    <td>{crop.name}</td>\r\n                                                    <td>{this.state.busyDeletingCrop?<i className=\"fa pure-button-disabled fa-trash-o\"/>:<i onClick={() => this.deleteCrop(crop.cropId)} className=\"deleteIcon fa fa-trash-o\"/>}</td>\r\n                                                </tr>\r\n                                            )\r\n                                        }):\r\n                                        <tr>\r\n                                            <td colSpan={3}>No crops yet.</td>\r\n                                        </tr>\r\n                                    }\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        user: state.user,\r\n        fields: state.fields,\r\n        crops: state.crops,\r\n        last: state.last\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addCrop: async(owner, cropId, name) => {\r\n            dispatch(await newCrop(owner, cropId, name))\r\n        },\r\n        removeCrop: async(owner, cropId) => {\r\n            dispatch(await deleteCrop(owner, cropId));\r\n        },\r\n        addField: async(owner, data) => {\r\n            dispatch(await newField(owner, data));\r\n        },\r\n        removeField: async(owner, fieldId) => {\r\n            dispatch(await deleteField(owner, fieldId));\r\n        },\r\n        retrieveCrops: async(email) => {\r\n            dispatch(await getCrops(email));\r\n        },\r\n        retrieveFields: async(email) => {\r\n            dispatch(await getFields(email));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Configure);","import React from 'react';\nimport TaskBar from './components/TaskBar';\nimport Splash from './pages/Splash';\nimport Dashboard from './pages/Dashboard';\nimport Chat from './pages/Chat';\nimport FAQ from './pages/FAQ';\nimport Recovery from './pages/Recovery';\nimport Configure from './pages/Configure';\nimport './App.css';\nimport { Route, HashRouter } from 'react-router-dom';\n\nclass App extends React.Component {\n  render(){\n    return (\n      <>\n        <TaskBar />\n        <HashRouter>\n          <Route exact path=\"/\" render={() => <Splash />}></Route>\n          <Route path=\"/dashboard\" render={() => <Dashboard/>}></Route>\n          <Route path=\"/chat\" render={() => <Chat/>}></Route>\n          <Route path=\"/faq\" render={() => <FAQ/>}></Route>\n          <Route path=\"/recovery\" render={() => <Recovery/>}></Route>\n          <Route path=\"/configure\" render={() => <Configure />}></Route>\n        </HashRouter>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'purecss/build/pure.css';\nimport 'purecss/build/grids-responsive.css';\nimport store from './Store';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { saveState } from './localStorage';\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}