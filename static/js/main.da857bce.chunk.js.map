{"version":3,"sources":["sagas/loginSaga.js","constants.js","sagas/logoutSaga.js","sagas/geoLocationSaga.js","sagas/fieldsRetrievalSaga.js","sagas/fieldAdditionSaga.js","sagas/fieldDeletionSaga.js","sagas/cropsRetrievalSaga.js","sagas/cropAdditionSaga.js","sagas/cropDeletionSaga.js","sagas/satelliteInsightsRetrievalSaga.js","sagas/agriBotInsightsRetrievalSaga.js","sagas/index.js","Reducer.js","Store.js","localStorage.js","Actions.js","components/AppLayout.js","pages/Splash.js","components/Card.js","components/AgriBotInsightsDashboard.js","components/FieldSelector.js","components/SatelliteInsightsDashboard.js","pages/Dashboard.js","pages/Chat.js","pages/FAQ.js","pages/Recovery.js","pages/Configure.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["loginAsync","loginWatcher","data","variables","email","input","password","fetch","method","headers","body","JSON","stringify","query","then","json","resp","login","put","type","error","message","user","takeEvery","logoutAsync","logoutWatcher","localStorage","setItem","geolocationAsync","geolocationWatcher","getUserLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","location","enableHighAccuracy","call","coords","latitude","longitude","fieldsRetrievalAsync","fieldsRetrievalWatcher","fields","addFieldAsync","addFieldToAgro","id","fieldResId","owner","geo_json","features","properties","createField","newField","deleteFieldAsync","fieldId","ok","removeField","removedField","cropsRetrievalAsync","crops","cropAdditionAsync","cropAdditionWatcher","cropResId","cropId","name","createCrop","newCrop","cropDeletionAsync","cropDeletionWatcher","removeCrop","removedCrop","satelliteInsightsRetrievalAsync","fieldDataRetrievalWatcher","substring","lastIndexOf","satelliteInsights","weatherData","forecastWeatherData","a","soilData","uviData","satelliteImageryData","length","stats","ndvi","replace","ndviStats","ndviStatsData","evi2","eviStats","eviStatsData","agriBotInsightsRetrievalAsync","agriBotDataRetrievalWatcher","agriBotInsights","undefined","deviceResponse","rootSaga","all","Object","values","loginSaga","logoutSaga","geolocationSaga","fieldsRetrievalSaga","fieldAdditionSaga","fieldDeletionSaga","cropsRetrievalSaga","cropsAdditionSaga","cropDeletionSaga","satelliteInsightsRetrievalSaga","agriBotInsightsRetrievalSaga","map","fork","reducer","state","action","satelliteBusy","busy","agriBotBusy","console","log","concat","filter","field","crop","sagaMiddleware","createSagaMiddleware","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","persistedState","serializedState","getItem","parse","err","loadState","store","createStore","run","getFields","AppLayout","sideNav","profileModalShow","loginModalShow","_handleLogout","setState","props","logout","_handleLoginSubmit","_handleEmailChange","evt","target","value","_handlePasswordChange","className","aria-label","onClick","isActive","this","href","prefix","Modal","open","primaryButtonText","secondaryButtonText","onRequestClose","onRequestSubmit","onSecondarySubmit","style","textAlign","alt","src","photo","width","height","TextInput","disabled","labelText","light","placeholder","onChange","to","SideNavProps","isRail","defaultExpanded","expanded","renderIcon","Home20","Forum20","Data_220","Dashboard20","Help20","children","React","Component","connect","dispatch","Splash","Button","Information20","maxWidth","Card","Tile","heading","icon","subtitle","AgriBotInsightsDashboard","pH","parseFloat","soil","r","g","b","toPrecision","n","p","k","s","ca","mg","fe","mn","cu","zn","mo","_formatName","text","toUpperCase","_getNutrients","getAgriBotInsights","backgroundColor","Row","Column","reload","Renew20","print","Printer20","bmp280","dht11","Date","timestamp","toLocaleString","env_temp","env_humidity","moist","ds18b20","soil_temp","aqi","air_pressure","air_temp","altitude","cx","cy","plantdoc","report","dt","url","deficiencies","deficiency","diseases","disease","FieldSelector","datetime","datetimeupdater","UNSAFE_componentWillMount","updater","setInterval","clearInterval","kind","size","Select","selectedField","onFieldChange","inline","seperator","SelectItem","key","SatelliteInsightsDashboard","forecastWeatherSlider","_onFieldChange","e","getSatelliteInsights","_onForecastWeatherSliderChange","weather","main","temp","feels_like","temp_min","temp_max","pressure","humidity","sea_level","grnd_level","wind","speed","deg","clouds","image","dc","cl","mean","t0","t10","moisture","uvi","Slider","inputType","max","min","step","Dashboard","selectedTab","_setEnvironment","_handleContentChange","index","Grid","ContentSwitcher","selectedIndex","Switch","Chat","FAQ","Recovery","cropsDetails","require","TableContainer","DataTable","Table","TableHead","TableRow","TableBody","TableCell","TableHeader","Configure","selectedCrop","fieldGeoJSON","fieldName","Math","random","toString","retrieveGeolocation","retrieveCrops","retrieveFields","_handleChangeCropSelection","_handleAddCrop","addCrop","_handleAddField","addField","deleteField","deleteCrop","provider","osm","x","y","z","String","fromCharCode","wikimedia","dpr","stamen","_handleMapBoundChange","ne","bounds","sw","nw","se","format","sm","lg","center","animate","zoom","onBoundsChanged","Add20","title","colspan","pt1","geometry","coordinates","pt2","tabIndex","hasonlyicon","TrashCan20","iconDescription","Form","helperText","defaultValue","Content","App","Loading","active","description","withOverlay","small","exact","path","render","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","subscribe","saveState","getState","ReactDOM","document","getElementById","URL","process","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.da857bce.chunk.js","sourcesContent":["import { put, takeEvery } from 'redux-saga/effects';\nimport * as actionTypes from '../constants';\nconst serverURL = \"https://project-kisaan-graphql-server.herokuapp.com/graphql\";\n\nfunction* loginAsync(data) {\n    try {\n        let query = `query login($email: String, $password: String){login(email: $email, password: $password){name photo email}}`;\n        let variables = {email: data.input.email, password: data.input.password};\n        let resp = yield fetch(serverURL, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ query, variables })\n        }).then(data => {\n            return data.json();\n        });\n        if (!resp.data.login){\n            yield put({\n                type: actionTypes.LOGIN_FAILURE, error: 'invalid credentials'\n            })\n        } else {\n            yield put({\n                type: actionTypes.LOGIN_SUCCESS, message: 'logged in', user: resp.data.login\n            })\n        }\n    } catch(err) {\n        yield put({\n            type: actionTypes.LOGIN_FAILURE, error: err\n        })\n    }\n}\n\nexport function* loginWatcher() {\n    yield takeEvery(actionTypes.LOGIN_REQUEST, loginAsync)\n}\n","export const SET_BUSY = \"SET_BUSY\"\nexport const UNSET_BUSY = \"UNSET_BUSY\"\n\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\"\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\"\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\"\n\nexport const LOGOUT_REQUEST = \"LOGOUT_REQUEST\"\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\"\nexport const LOGOUT_FAILURE = \"LOGOUT_FAILURE\"\n\nexport const GEOLOCATION_RETRIEVAL_REQUEST = \"GEOLOCATION_RETRIEVAL_REQUEST\"\nexport const GEOLOCATION_RETRIEVAL_SUCCESS = \"GEOLOCATION_RETRIEVAL_SUCCESS\"\nexport const GEOLOCATION_RETRIEVAL_FAILURE = \"GEOLOCATION_RETRIEVAL_FAILURE\"\n\nexport const FIELDS_RETRIEVAL_REQUEST = \"FIELDS_RETRIEVAL_REQUEST\"\nexport const FIELDS_RETRIEVAL_SUCCESS = \"FIELDS_RETRIEVAL_SUCCESS\"\nexport const FIELDS_RETRIEVAL_FAILURE = \"FIELDS_RETRIEVAL_FAILURE\"\n\nexport const CROPS_RETRIEVAL_REQUEST = \"CROPS_RETRIEVAL_REQUEST\"\nexport const CROPS_RETRIEVAL_SUCCESS = \"CROPS_RETRIEVAL_SUCCESS\"\nexport const CROPS_RETRIEVAL_FAILURE = \"CROPS_RETRIEVAL_FAILURE\"\n\nexport const ADD_FIELD_REQUEST = \"ADD_FIELD_REQUEST\"\nexport const ADD_FIELD_SUCCESS = \"ADD_FIELD_SUCCESS\"\nexport const ADD_FIELD_FAILURE = \"ADD_FIELD_FAILURE\"\n\nexport const DELETE_FIELD_REQUEST = \"DELETE_FIELD_REQUEST\"\nexport const DELETE_FIELD_SUCCESS = \"DELETE_FIELD_SUCCESS\"\nexport const DELETE_FIELD_FAILURE = \"DELETE_FIELD_FAILURE\"\n\nexport const ADD_CROP_REQUEST = \"ADD_CROP_REQUEST\"\nexport const ADD_CROP_SUCCESS = \"ADD_CROP_SUCCESS\"\nexport const ADD_CROP_FAILURE = \"ADD_CROP_FAILURE\"\n\nexport const DELETE_CROP_REQUEST = \"DELETE_CROP_REQUEST\"\nexport const DELETE_CROP_SUCCESS = \"DELETE_CROP_SUCCESS\"\nexport const DELETE_CROP_FAILURE = \"DELETE_CROP_FAILURE\"\n\nexport const SATELLITE_INSIGHTS_RETRIEVAL_REQUEST = \"SATELLITE_INSIGHTS_RETRIEVAL_REQUEST\"\nexport const SATELLITE_INSIGHTS_RETRIEVAL_SUCCESS = \"SATELLITE_INSIGHTS_RETRIEVAL_SUCCESS\"\nexport const SATELLITE_INSIGHTS_RETRIEVAL_FAILURE = \"SATELLITE_INSIGHTS_RETRIEVAL_FAILURE\"\n\nexport const AGRIBOT_INSIGHTS_RETRIEVAL_REQUEST = \"AGRIBOT_INSIGHTS_RETRIEVAL_REQUEST\"\nexport const AGRIBOT_INSIGHTS_RETRIEVAL_SUCCESS = \"AGRIBOT_INSIGHTS_RETRIEVAL_SUCCESS\"\nexport const AGRIBOT_INSIGHTS_RETRIEVAL_FAILURE = \"AGRIBOT_INSIGHTS_RETRIEVAL_FAILURE\"\n","import { put, takeEvery } from 'redux-saga/effects';\nimport * as actionTypes from '../constants';\n\nfunction* logoutAsync() {\n    try {\n        localStorage.setItem('projectkisaanstate', '')\n        yield put({\n            type: actionTypes.LOGOUT_SUCCESS, message: 'logged out'\n        })\n    } catch(err) {\n        yield put({\n            type: actionTypes.LOGIN_FAILURE, error: err\n        })\n    }\n}\n\nexport function* logoutWatcher() {\n    yield takeEvery(actionTypes.LOGOUT_REQUEST, logoutAsync)\n}\n","import { put, takeEvery, call } from 'redux-saga/effects';\nimport * as actionTypes from '../constants';\n\nconst getUserLocation = () => new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(\n        location => resolve(location),\n        error => reject(error),\n        { enableHighAccuracy: true }\n    )\n})\n\nfunction* geolocationAsync() {\n    try {\n        const location = yield call(getUserLocation)\n        if (location) {\n            yield put({\n                type: actionTypes.GEOLOCATION_RETRIEVAL_SUCCESS, message: 'received geolocation', geolocation: [location.coords.latitude, location.coords.longitude]\n            })\n        } else {\n            yield put({\n                type: actionTypes.GEOLOCATION_RETRIEVAL_FAILURE, error: 'geolocation not received'\n            })\n        }\n    } catch (err) {\n        yield put({\n            type: actionTypes.GEOLOCATION_RETRIEVAL_FAILURE, error: err\n        })\n    }\n}\n\nexport function* geolocationWatcher() {\n    yield takeEvery(actionTypes.GEOLOCATION_RETRIEVAL_REQUEST, geolocationAsync)\n}\n","import { put, takeEvery } from 'redux-saga/effects';\nimport * as actionTypes from '../constants';\nconst serverURL = \"https://project-kisaan-graphql-server.herokuapp.com/graphql\";\n\nfunction* fieldsRetrievalAsync(data) {\n    try {\n        let query = `query fields($email: String){fields(email: $email){fieldResId data{name geo_json{features{geometry{coordinates}}}}}}`;\n        let variables = {email: data.input.email};\n        let resp = yield fetch(serverURL, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ query, variables })\n        }).then(data => {\n            return data.json();\n        });\n        yield put({\n            type: actionTypes.FIELDS_RETRIEVAL_SUCCESS, message: 'received fields', fields: resp.data.fields\n        })\n    } catch(err) {\n        yield put({\n            type: actionTypes.FIELDS_RETRIEVAL_FAILURE, error: err\n        })\n    }\n}\n\nexport function* fieldsRetrievalWatcher() {\n    yield takeEvery(actionTypes.FIELDS_RETRIEVAL_REQUEST, fieldsRetrievalAsync)\n}","import { put, takeEvery } from 'redux-saga/effects';\nimport * as actionTypes from '../constants';\nconst serverURL = \"https://project-kisaan-graphql-server.herokuapp.com/graphql\";\nconst agroAPIURL = \"https://api.agromonitoring.com/agro/1.0\";\n\nfunction* addFieldAsync(data) {\n    try {\n        const addFieldToAgro = yield fetch(`${agroAPIURL}/polygons?appid=83e9d92cb19c29c0045da2e0282321f5`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data.input.data)\n        }).then(data => {\n            return data.json()\n        })\n        if (addFieldToAgro.id) {\n            let fieldResId = `${data.input.owner}:fields:${addFieldToAgro.id}`;\n            let query = `mutation addField($owner: String, $data: FieldInputData, $fieldResId: String){createField(owner: $owner, data: $data, fieldResId: $fieldResId){fieldResId data{name geo_json{features{geometry{coordinates}}}}}}`;\n            delete data.input.data.geo_json.features[0].properties\n            let variables = { fieldResId: fieldResId, owner: data.input.owner, data: data.input.data };\n            const addFieldToDB = yield fetch(serverURL, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ query, variables })\n            }).then(data => {\n                return data.json();\n            })\n            if (addFieldToDB.data.createField.fieldResId) {\n                yield put({\n                    type: actionTypes.ADD_FIELD_SUCCESS, message: 'field added', newField: { fieldResId: fieldResId, data: data.input.data }\n                })\n            }\n        } else {\n            yield put({\n                type: actionTypes.ADD_FIELD_FAILURE, error: 'field not added'\n            })\n        }\n    } catch (err) {\n        yield put({\n            type: actionTypes.ADD_FIELD_FAILURE, error: err\n        })\n    }\n}\n\nexport function* geolocationWatcher() {\n    yield takeEvery(actionTypes.ADD_FIELD_REQUEST, addFieldAsync)\n}\n","import { put, takeEvery } from 'redux-saga/effects';\nimport * as actionTypes from '../constants';\nconst serverURL = \"https://project-kisaan-graphql-server.herokuapp.com/graphql\";\nconst agroAPIURL = \"https://api.agromonitoring.com/agro/1.0\";\n\nfunction* deleteFieldAsync(data) {\n    try {\n        const deleteFieldFromAgro = yield fetch(`${agroAPIURL}/polygons/${data.input.fieldId}?appid=83e9d92cb19c29c0045da2e0282321f5`, {\n            method: 'DELETE'\n        }).then(data => {\n            return data.ok\n        })\n        if (deleteFieldFromAgro) {\n            let query = `mutation deleteField($fieldResId: String){removeField(fieldResId: $fieldResId)}`;\n            let fieldResId = `${data.input.owner}:fields:${data.input.fieldId}`;\n            let variables = { fieldResId };\n            const deleteFieldFromDB = yield fetch(serverURL, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ query, variables })\n            }).then(data => {\n                return data.json();\n            })\n            if (deleteFieldFromDB.data.removeField) {\n                yield put({\n                    type: actionTypes.DELETE_FIELD_SUCCESS, message: 'field deleted', removedField: fieldResId\n                })\n            }\n        } else {\n            yield put({\n                type: actionTypes.DELETE_FIELD_FAILURE, error: 'field not deleted'\n            })\n        }\n    } catch (err) {\n        yield put({\n            type: actionTypes.DELETE_FIELD_FAILURE, error: err\n        })\n    }\n}\n\nexport function* geolocationWatcher() {\n    yield takeEvery(actionTypes.DELETE_FIELD_REQUEST, deleteFieldAsync)\n}\n","import { put, takeEvery } from 'redux-saga/effects';\nimport * as actionTypes from '../constants';\nconst serverURL = \"https://project-kisaan-graphql-server.herokuapp.com/graphql\";\n\nfunction* cropsRetrievalAsync(data) {\n    try {\n        let query = `query crops($email: String){crops(email: $email){cropId name cropResId}}`;\n        let variables = data.input;\n        let resp = yield fetch(serverURL, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ query, variables })\n        }).then(data => {\n            return data.json();\n        });\n        yield put({\n            type: actionTypes.CROPS_RETRIEVAL_SUCCESS, message: 'received crops', crops: resp.data.crops\n        })\n    } catch(err) {\n        yield put({\n            type: actionTypes.CROPS_RETRIEVAL_FAILURE, error: err\n        })\n    }\n}\n\nexport function* fieldsRetrievalWatcher() {\n    yield takeEvery(actionTypes.CROPS_RETRIEVAL_REQUEST, cropsRetrievalAsync)\n}","import { put, takeEvery } from 'redux-saga/effects';\nimport * as actionTypes from '../constants';\nconst serverURL = \"https://project-kisaan-graphql-server.herokuapp.com/graphql\";\n\nfunction* cropAdditionAsync(data) {\n    try {\n        let query = `mutation addCrop($owner: String, $cropId: String, $cropResId: String, $name: String){createCrop(owner: $owner, cropId: $cropId, name: $name, cropResId: $cropResId){cropResId cropId}}`;\n        let cropResId = `${data.input.owner}:crops:${data.input.cropId}`;\n        let variables = { cropId: data.input.cropId, name: data.input.name, owner: data.input.owner, cropResId };\n        let resp = yield fetch(serverURL, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ query, variables })\n        }).then(data => {\n            return data.json();\n        });\n        if (resp.data.createCrop.cropId){\n            yield put({\n                type: actionTypes.ADD_CROP_SUCCESS, message: 'added crop', newCrop: { cropId: data.input.cropId, name: data.input.name }\n            })\n        } else {\n            yield put({\n                type: actionTypes.ADD_CROP_FAILURE, error: 'can\\'t add new crop'\n            })\n        }\n    } catch (err) {\n        yield put({\n            type: actionTypes.ADD_CROP_FAILURE, error: err\n        })\n    }\n}\n\nexport function* cropAdditionWatcher() {\n    yield takeEvery(actionTypes.ADD_CROP_REQUEST, cropAdditionAsync)\n}","import { put, takeEvery } from 'redux-saga/effects';\nimport * as actionTypes from '../constants';\nconst serverURL = \"https://project-kisaan-graphql-server.herokuapp.com/graphql\";\n\nfunction* cropDeletionAsync(data) {\n    try {\n        let query = `mutation deleteCrop($cropResId: String){removeCrop(cropResId: $cropResId)}`;\n        let cropResId = `${data.input.owner}:crops:${data.input.cropId}`;\n        let variables = { cropResId };\n        let resp = yield fetch(serverURL, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ query, variables })\n        }).then(data => {\n            return data.json();\n        });\n        if (resp.data.removeCrop){\n            yield put({\n                type: actionTypes.DELETE_CROP_SUCCESS, message: 'deleted crop', removedCrop: data.input.cropId\n            })\n        } else {\n            yield put({\n                type: actionTypes.DELETE_CROP_FAILURE, error: 'can\\'t delete crop'\n            })\n        }\n    } catch (err) {\n        yield put({\n            type: actionTypes.DELETE_CROP_FAILURE, error: err\n        })\n    }\n}\n\nexport function* cropDeletionWatcher() {\n    yield takeEvery(actionTypes.DELETE_CROP_REQUEST, cropDeletionAsync)\n}","import { put, takeEvery } from 'redux-saga/effects';\nimport * as actionTypes from '../constants';\nconst agroAPIURL = \"https://api.agromonitoring.com/agro/1.0\";\n\nfunction* satelliteInsightsRetrievalAsync(data) {\n    try {\n        const fieldId = data.input.fieldResId.substring(data.input.fieldResId.lastIndexOf(\":\")+1)\n        const satelliteInsights = {}\n        \n        const weatherData = yield fetch(`${agroAPIURL}/weather?polyid=${fieldId}&appid=83e9d92cb19c29c0045da2e0282321f5&units=metric`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(data => {\n            return data.json()\n        })\n        satelliteInsights.weatherData = weatherData;\n\n        const forecastWeatherData = yield fetch(`${agroAPIURL}/weather/forecast?polyid=${fieldId}&appid=83e9d92cb19c29c0045da2e0282321f5&units=metric`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(data => {\n            return data.json()\n        })\n        satelliteInsights.forecastWeatherData = forecastWeatherData;\n\n        const soilData = yield fetch(`${agroAPIURL}/soil?polyid=${fieldId}&appid=83e9d92cb19c29c0045da2e0282321f5&units=metric`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(async data => {\n            return data.json()\n        })\n        satelliteInsights.soilData = soilData;\n\n        const uviData = yield fetch(`${agroAPIURL}/uvi?polyid=${fieldId}&appid=83e9d92cb19c29c0045da2e0282321f5&units=metric`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(async data => {\n            return data.json()\n        })\n        satelliteInsights.uviData = uviData;\n\n        const satelliteImageryData = yield fetch(`${agroAPIURL}/image/search?start=0&end=1&polyid=${fieldId}&appid=83e9d92cb19c29c0045da2e0282321f5&units=metric`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(async data => {\n            return data.json()\n        })\n        satelliteInsights.satelliteImageryData = satelliteImageryData;\n\n        const ndviStats = yield fetch(`${satelliteImageryData[satelliteImageryData.length-1].stats.ndvi.replace(\"http://\", \"https://\")}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(async data => {\n           return data.json()\n        })\n        satelliteInsights.ndviStatsData = ndviStats;\n\n        const eviStats = yield fetch(`${satelliteImageryData[satelliteImageryData.length-1].stats.evi2.replace(\"http://\", \"https://\")}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(async data => {\n           return data.json()\n        })\n        satelliteInsights.eviStatsData = eviStats;\n\n        yield put({\n            type: actionTypes.SATELLITE_INSIGHTS_RETRIEVAL_SUCCESS, message: 'satellite insights received', satelliteInsights: satelliteInsights\n        })        \n\n    } catch (err) {\n        yield put({\n            type: actionTypes.SATELLITE_INSIGHTS_RETRIEVAL_FAILURE, error: err\n        })\n    }\n}\n\nexport function* fieldDataRetrievalWatcher() {\n    yield takeEvery(actionTypes.SATELLITE_INSIGHTS_RETRIEVAL_REQUEST, satelliteInsightsRetrievalAsync)\n}","import { put, takeEvery } from 'redux-saga/effects';\nimport * as actionTypes from '../constants';\n\nfunction* agriBotInsightsRetrievalAsync(data) {\n    try {\n        const agriBotInsights = {}\n        const deviceResponse = yield fetch(`https://agribot-7dadf.firebaseio.com/event/hardware.json`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(data => {\n            return data.ok ? data.json() : undefined\n        })\n\n        agriBotInsights.deviceResponse = deviceResponse;\n\n        if (agriBotInsights) {\n            yield put({\n                type: actionTypes.AGRIBOT_INSIGHTS_RETRIEVAL_SUCCESS, message: 'agribot insights received', agriBotInsights: agriBotInsights\n            })\n        } else {\n            yield put({\n                type: actionTypes.AGRIBOT_INSIGHTS_RETRIEVAL_FAILURE, error: 'agribot insights not received'\n            })\n        }\n\n    } catch (err) {\n        yield put({\n            type: actionTypes.AGRIBOT_INSIGHTS_RETRIEVAL_FAILURE, error: err\n        })\n    }\n}\n\nexport function* agriBotDataRetrievalWatcher() {\n    yield takeEvery(actionTypes.AGRIBOT_INSIGHTS_RETRIEVAL_REQUEST, agriBotInsightsRetrievalAsync)\n}","import * as loginSaga from './loginSaga';\nimport * as logoutSaga from './logoutSaga';\nimport * as geolocationSaga from './geoLocationSaga';\n\nimport * as fieldsRetrievalSaga from './fieldsRetrievalSaga';\nimport * as fieldAdditionSaga from './fieldAdditionSaga';\nimport * as fieldDeletionSaga from './fieldDeletionSaga';\n\nimport * as cropsRetrievalSaga from './cropsRetrievalSaga';\nimport * as cropsAdditionSaga from './cropAdditionSaga';\nimport * as cropDeletionSaga from './cropDeletionSaga';\n\nimport * as satelliteInsightsRetrievalSaga from './satelliteInsightsRetrievalSaga';\nimport * as agriBotInsightsRetrievalSaga from './agriBotInsightsRetrievalSaga';\n\nimport { all, fork } from 'redux-saga/effects';\n\nexport default function* rootSaga() {\n    yield all([\n        ...Object.values(loginSaga),\n        ...Object.values(logoutSaga),\n        ...Object.values(geolocationSaga),\n        ...Object.values(fieldsRetrievalSaga),\n        ...Object.values(fieldAdditionSaga),\n        ...Object.values(fieldDeletionSaga),\n        ...Object.values(cropsRetrievalSaga),\n        ...Object.values(cropsAdditionSaga),\n        ...Object.values(cropDeletionSaga),\n        ...Object.values(satelliteInsightsRetrievalSaga),\n        ...Object.values(agriBotInsightsRetrievalSaga)\n    ].map(fork))\n}","import * as actionTypes from './constants';\n\nconst reducer = (state, action) => {\n    switch(action.type){\n\n        // Request Actions\n        case actionTypes.LOGIN_REQUEST: {\n            return {\n                ...state,\n                satelliteBusy: false,\n                busy: true\n            }\n        }\n\n        case actionTypes.LOGOUT_REQUEST: {\n            return {\n                ...state,\n                satelliteBusy: false,\n                busy: true\n            }\n        }\n\n        case actionTypes.GEOLOCATION_RETRIEVAL_REQUEST: {\n            return {\n                ...state,\n                satelliteBusy: false,\n                busy: true\n            }\n        }\n\n        case actionTypes.FIELDS_RETRIEVAL_REQUEST: {\n            return {\n                ...state,\n                satelliteBusy: false,\n                busy: true\n            }\n        }\n\n        case actionTypes.CROPS_RETRIEVAL_REQUEST: {\n            return {\n                ...state,\n                satelliteBusy: false,\n                busy: true\n            }\n        }\n\n        case actionTypes.ADD_FIELD_REQUEST: {\n            return {\n                ...state,\n                satelliteBusy: false,\n                busy: true\n            }\n        }\n\n        case actionTypes.ADD_CROP_REQUEST: {\n            return {\n                ...state,\n                satelliteBusy: false,\n                busy: true\n            }\n        }\n\n        case actionTypes.DELETE_FIELD_REQUEST: {\n            return {\n                ...state,\n                satelliteBusy: false,\n                busy: true\n            }\n        }\n\n        case actionTypes.DELETE_CROP_REQUEST: {\n            return {\n                ...state,\n                satelliteBusy: false,\n                busy: true\n            }\n        }\n\n        case actionTypes.SATELLITE_INSIGHTS_RETRIEVAL_REQUEST: {\n            return {\n                ...state,\n                busy: true,\n                agriBotBusy: false,\n                satelliteBusy: true\n            }\n        }\n\n        case actionTypes.AGRIBOT_INSIGHTS_RETRIEVAL_REQUEST: {\n            return {\n                ...state,\n                busy: true,\n                satelliteBusy: false,\n                agriBotBusy: true\n            }\n        }\n\n        // Failure Actions\n        case actionTypes.LOGIN_FAILURE: {\n            console.log('success:', action.message);\n            return {\n                ...state,\n                busy: false,\n                satelliteBusy: false,\n                user: undefined\n            }\n        }\n\n        case actionTypes.LOGOUT_FAILURE: {\n            console.log('success:', action.message);\n            return {\n                ...state,\n                busy: false,\n                satelliteBusy: false,\n                user: undefined\n            }\n        }\n\n        case actionTypes.GEOLOCATION_RETRIEVAL_FAILURE: {\n            console.log('success:', action.message);\n            return {\n                ...state,\n                busy: false,\n                satelliteBusy: false,\n                geolocation: undefined\n            }\n        }\n        \n        case actionTypes.FIELDS_RETRIEVAL_FAILURE: {\n            console.log('success:', action.message);\n            return {\n                ...state,\n                busy: false,\n                fields: undefined\n            }\n        }\n        \n        case actionTypes.CROPS_RETRIEVAL_FAILURE: {\n            console.log('success:', action.message);\n            return {\n                ...state,\n                busy: false,\n                satelliteBusy: false,\n                crops: undefined\n            }\n        }\n        \n        case actionTypes.ADD_FIELD_FAILURE: {\n            console.log('success:', action.message);\n            return {\n                ...state,\n                busy: false,\n                satelliteBusy: false\n            }\n        }\n\n        case actionTypes.ADD_CROP_FAILURE: {\n            console.log('success:', action.message);\n            return {\n                ...state,\n                busy: false,\n                satelliteBusy: false\n            }\n        }\n\n        case actionTypes.DELETE_FIELD_FAILURE: {\n            console.log('success:', action.message);\n            return {\n                ...state,\n                busy: false,\n                satelliteBusy: false\n            }\n        }\n\n        case actionTypes.DELETE_CROP_FAILURE: {\n            console.log('success:', action.message);\n            return {\n                ...state,\n                busy: false,\n                satelliteBusy: false\n            }\n        }\n\n        case actionTypes.SATELLITE_INSIGHTS_RETRIEVAL_FAILURE: {\n            console.log('success:', action.message);\n            return {\n                ...state,\n                busy: false,\n                satelliteBusy: false,\n                agriBotBusy: false,\n                satelliteInsights: undefined\n            }\n        }\n\n        case actionTypes.AGRIBOT_INSIGHTS_RETRIEVAL_FAILURE: {\n            console.log('success:', action.message);\n            return {\n                ...state,\n                busy: false,\n                agriBotBusy: false,\n                satelliteBusy: false,\n                agriBotInsights: undefined\n            }\n        }\n\n        // Success Actions\n        case actionTypes.LOGIN_SUCCESS: {\n            console.log('success:', action.message);\n            return {\n                ...state,\n                busy: false,\n                satelliteBusy: false,\n                user: action.user\n            }\n        }\n\n        case actionTypes.LOGOUT_SUCCESS: {\n            console.log('success:', action.message);\n            return {\n                ...state,\n                busy: false,\n                satelliteBusy: false,\n                user: undefined\n            }\n        }\n\n        case actionTypes.GEOLOCATION_RETRIEVAL_SUCCESS: {\n            console.log('success:', action.message);\n            return {\n                ...state,\n                busy: false,\n                satelliteBusy: false,\n                geolocation: action.geolocation\n            }\n        }\n        \n        case actionTypes.FIELDS_RETRIEVAL_SUCCESS: {\n            console.log('success:', action.message);\n            return {\n                ...state,\n                busy: false,\n                fields: action.fields\n            }\n        }\n        \n        case actionTypes.CROPS_RETRIEVAL_SUCCESS: {\n            console.log('success:', action.message);\n            return {\n                ...state,\n                busy: false,\n                satelliteBusy: false,\n                crops: action.crops\n            }\n        }\n        \n        case actionTypes.ADD_FIELD_SUCCESS: {\n            console.log('success:', action.message);\n            let fields = state.fields.concat(action.newField);\n            return {\n                ...state,\n                busy: false,\n                satelliteBusy: false,\n                fields\n            }\n        }\n\n        case actionTypes.ADD_CROP_SUCCESS: {\n            console.log('success:', action.message);\n            let crops = state.crops.concat(action.newCrop);\n            return {\n                ...state,\n                busy: false,\n                satelliteBusy: false,\n                crops\n            }\n        }\n\n        case actionTypes.DELETE_FIELD_SUCCESS: {\n            console.log('success:', action.message);\n            let fields = state.fields.filter(field => {\n                return field.fieldResId!==action.removedField\n            });\n            return {\n                ...state,\n                busy: false,\n                satelliteBusy: false,\n                fields\n            }\n        }\n\n        case actionTypes.DELETE_CROP_SUCCESS: {\n            console.log('success:', action.message);\n            let crops = state.crops.filter(crop => {\n                return crop.cropId!==action.removedCrop\n            });\n            return {\n                ...state,\n                busy: false,\n                satelliteBusy: false,\n                crops\n            }\n        }\n\n        case actionTypes.SATELLITE_INSIGHTS_RETRIEVAL_SUCCESS: {\n            console.log('success:', action.message);\n            return {\n                ...state,\n                busy: false,\n                satelliteBusy: false,\n                agriBotBusy: false,\n                satelliteInsights: action.satelliteInsights\n            }\n        }\n\n        case actionTypes.AGRIBOT_INSIGHTS_RETRIEVAL_SUCCESS: {\n            console.log('success:', action.message);\n            return {\n                ...state,\n                busy: false,\n                agriBotBusy: false,\n                satelliteBusy: false,\n                agriBotInsights: action.agriBotInsights\n            }\n        }\n\n        default: {\n            console.log('invalid action type')\n            return {\n                ...state\n            }\n        }\n    }\n\n}\n\nexport default reducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas/index';\nimport reducer from './Reducer';\nimport { loadState } from './localStorage';\n\nconst sagaMiddleware = createSagaMiddleware()\nconst composeEnhancers = typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\nconst enhancer = composeEnhancers(\n  applyMiddleware(sagaMiddleware),\n);\n\nconst persistedState = loadState() || {};\nconst store = createStore(reducer, persistedState, enhancer);\nsagaMiddleware.run(rootSaga);\nexport default store;","export const loadState = () => {\n    try{\n        const serializedState = localStorage.getItem('projectkisaanstate');\n        if(serializedState === null){\n            return undefined;\n        }\n        return JSON.parse(serializedState);\n    } catch(err){\n        return undefined;\n    }\n}\n\nexport const saveState = (state) => {\n    try{\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('projectkisaanstate', serializedState);\n    } catch(err){\n        console.log(err);\n    }\n}","import * as actionTypes from './constants';\n\nexport const getGeolocation = () => ({\n    type: actionTypes.GEOLOCATION_RETRIEVAL_REQUEST\n})\n\nexport const loginUser = (input) => ({\n    type: actionTypes.LOGIN_REQUEST,\n    input\n})\n\nexport const logoutUser = () => ({\n    type: actionTypes.LOGOUT_REQUEST\n})\n\nexport const getFields = (input) => ({\n    type: actionTypes.FIELDS_RETRIEVAL_REQUEST,\n    input\n})\n\nexport const getCrops = (input) => ({\n    type: actionTypes.CROPS_RETRIEVAL_REQUEST,\n    input\n})\n\nexport const newCrop = (input) => ({\n    type: actionTypes.ADD_CROP_REQUEST,\n    input\n})\n\nexport const newField = (input) => ({\n    type: actionTypes.ADD_FIELD_REQUEST,\n    input\n})\n\nexport const deleteField = (input) => ({\n    type: actionTypes.DELETE_FIELD_REQUEST,\n    input\n})\n\nexport const deleteCrop = (input) => ({\n    type: actionTypes.DELETE_CROP_REQUEST,\n    input\n})\n\nexport const getSatelliteInsights = (input) => ({\n    type: actionTypes.SATELLITE_INSIGHTS_RETRIEVAL_REQUEST,\n    input\n})\n\nexport const getAgriBotInsights = (input) => ({\n    type: actionTypes.AGRIBOT_INSIGHTS_RETRIEVAL_REQUEST,\n    input\n})\n","import React from 'react';\nimport {\n  Link,\n  HashRouter\n} from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { logoutUser, loginUser } from '../Actions';\nimport Forum20 from '@carbon/icons-react/lib/forum/20';\nimport Home20 from '@carbon/icons-react/lib/home/20';\nimport Dashboard20 from \"@carbon/icons-react/lib/dashboard/20\";\nimport Data_220 from \"@carbon/icons-react/lib/data--2/20\";\nimport Help20 from \"@carbon/icons-react/lib/help/20\";\nimport User20 from \"@carbon/icons-react/lib/user/20\";\nimport Notification20 from \"@carbon/icons-react/lib/notification/20\";\nimport Settings20 from \"@carbon/icons-react/lib/settings/20\";\nimport {\n  Header,\n  HeaderMenuButton,\n  HeaderName,\n  HeaderGlobalBar,\n  HeaderGlobalAction,\n  SideNav,\n  SideNavItems,\n  SideNavLink,\n  Content,\n  SideNavProps\n} from \"carbon-components-react/lib/components/UIShell\";\nimport { Modal, TextInput } from 'carbon-components-react';\n\nclass AppLayout extends React.Component {\n\n  state = {\n    sideNav: false,\n    profileModalShow: false,\n    loginModalShow: false,\n    email: \"\",\n    password: \"\"\n  }\n\n  _handleLogout = async () => {\n    this.setState({ profileModalShow: false });\n    await this.props.logout();\n  }\n  _handleLoginSubmit = async () => {\n    this.setState({ loginModalShow: false });\n    await this.props.login(this.state.email, this.state.password);\n  }\n  _handleEmailChange = (evt) => {\n    this.setState({ email: evt.target.value });\n  }\n  _handlePasswordChange = (evt) => {\n    this.setState({ password: evt.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"container\" >\n        <HashRouter>\n          <Header aria-label=\"IBM Platform Name\">\n            <HeaderMenuButton\n              aria-label=\"Open menu\"\n              onClick={() => this.setState({ sideNav: !this.state.sideNav })}\n              isActive={this.state.sideNav}\n            />\n            <HeaderName href=\"#home\" prefix=\"\">\n              Project Kisaan\n              </HeaderName>\n            <HeaderGlobalBar>\n              {\n                <>\n                  <HeaderGlobalAction onClick={() => { this.props.user ? this.setState({ profileModalShow: true }) : this.setState({ loginModalShow: true }) }} aria-label=\"User\">\n                    <User20 />\n                  </HeaderGlobalAction>\n                  {this.props.user ?\n                    <Modal\n                      open={this.state.profileModalShow}\n                      primaryButtonText=\"Close\"\n                      secondaryButtonText=\"Logout\"\n                      onRequestClose={() => this.setState({ profileModalShow: false })}\n                      onRequestSubmit={() => this.setState({ profileModalShow: false })}\n                      onSecondarySubmit={this._handleLogout}\n                    >\n                      <div style={{ textAlign: 'center' }}>\n                        <img alt=\"avatar\" src={this.props.user.photo} style={{ width: '80px', height: '80px' }}></img>\n                      </div>\n                      <TextInput\n                        id=\"user-name\"\n                        disabled={true}\n                        labelText=\"Your Name:\"\n                        light={false}\n                        value={this.props.user.name}\n                        type=\"text\"\n                      />\n                      <br />\n                      <TextInput\n                        id=\"user-email\"\n                        disabled={true}\n                        labelText=\"Your Email:\"\n                        light={false}\n                        value={this.props.user.email}\n                        type=\"text\"\n                      />\n                    </Modal> : <></>}\n                  <Modal\n                    open={this.state.loginModalShow}\n                    primaryButtonText=\"Login\"\n                    secondaryButtonText=\"Close\"\n                    onRequestClose={() => this.setState({ loginModalShow: false })}\n                    onRequestSubmit={this._handleLoginSubmit}\n                    onSecondarySubmit={() => this.setState({ loginModalShow: false })}\n                    disabled={true}\n                  >\n                    <TextInput\n                      id=\"email-input\"\n                      disabled={false}\n                      labelText=\"Your Email:\"\n                      light={false}\n                      placeholder=\"mark@gmail.com\"\n                      value={this.state.email}\n                      type=\"text\"\n                      onChange={this._handleEmailChange}\n                    />\n                    <br />\n                    <TextInput\n                      id=\"password-input\"\n                      disabled={false}\n                      labelText=\"Your Email:\"\n                      light={false}\n                      placeholder=\"**********\"\n                      value={this.state.password}\n                      type=\"password\"\n                      onChange={this._handlePasswordChange}\n                    />\n                  </Modal>\n                </>\n              }\n              <Link to=\"/notifications\">\n                <HeaderGlobalAction aria-label=\"Global Notifications\">\n                  <Notification20 />\n                </HeaderGlobalAction>\n              </Link>\n              <Link to=\"/settings\">\n                <HeaderGlobalAction aria-label=\"App Settings\">\n                  <Settings20 />\n                </HeaderGlobalAction>\n              </Link>\n            </HeaderGlobalBar>\n            <SideNav {...SideNavProps} aria-label=\"Side navigation\" isRail={true} defaultExpanded={false} expanded={this.state.sideNav}>\n              <SideNavItems>\n                <Link to=\"/home\">\n                  <SideNavLink renderIcon={Home20}>\n                    Home\n                    </SideNavLink>\n                </Link>\n                {\n                  this.props.user ?\n                    <>\n                      <SideNavLink href=\"#chat\" renderIcon={Forum20}>\n                        Chat\n                      </SideNavLink>\n                      <SideNavLink href=\"#configure\" renderIcon={Data_220}>\n                        Configure\n                      </SideNavLink>\n                      <SideNavLink href=\"#dashboard\" renderIcon={Dashboard20}>\n                        Dashboard\n                      </SideNavLink>\n                    </> :\n                    <></>\n                }\n                <SideNavLink href=\"#faq\" renderIcon={Help20}>\n                  Assistance/FAQs\n                  </SideNavLink>\n              </SideNavItems>\n            </SideNav>\n          </Header>\n        </HashRouter>\n        <Content>\n          {this.props.children}\n        </Content>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    busy: state.busy\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    logout: async () => {\n      dispatch(logoutUser());\n    },\n    login: (email, password) => {\n      dispatch(loginUser({email, password}));\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppLayout);\n","import React from 'react';\nimport {\n    Button\n} from 'carbon-components-react';\nimport { Information20 } from '@carbon/icons-react';\nclass Splash extends React.Component {\n    render(){\n        return(\n            <div style={{textAlign: 'center'}}>\n                <div>\n                    <img alt=\"splash\" src=\"https://image.winudf.com/v2/image/Y29tLmphaWtpc2Fhbl9pY29uXzE1MDk0NjYxNTVfMDUy/icon.png?w=170&fakeurl=1\"></img>\n                </div>\n                <br/>\n                <p>\n                    The project focuses on building a centralized automatic device which will be a great asset for farmers to make them able to produce as much as they can. It can be done by giving them accurate figures and ideas about what, how, when and where to grow.\n                </p>\n                <br/>\n                {\n                    !this.props.user?\n                    <>\n                        <div className=\"bx--form__helper-text\" style={{maxWidth: '100%'}}>\n                            You need to sign in with the credentials provided to you with AgriBot purchase.\n                        </div>\n                    </>:\n                    <>\n                        <div>\n                            <Button href=\"#faq\" renderIcon={Information20}>More Information</Button>\n                        </div>\n                        <br/>\n                        <div className=\"bx--form__helper-text\" style={{maxWidth: '100%'}}>\n                            You're already signed in.\n                        </div>\n                    </>\n                }\n            </div>\n        )   \n    }\n}\n\nexport default Splash;\n","import React from 'react';\nimport {\n    Tile\n} from 'carbon-components-react';\n\nexport default class Card extends React.Component {\n    render(){\n        return(\n            <Tile className=\"card\">\n                <Tile light className=\"card-header\">\n                    <div>\n                        <h3 className=\"inline\">\n                            { this.props.heading }\n                        </h3>\n                        <span className=\"inline card-icon\">\n                            { this.props.icon }\n                        </span>\n                    </div>\n                    <div className=\" inline bx--form__helper-text\">{ this.props.subtitle }</div>\n                </Tile>\n                <Tile light className=\"card-body\">\n                    { this.props.children }\n                </Tile>\n            </Tile>\n        )\n    }\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n    Row,\n    Column,\n    Content,\n    Button\n} from 'carbon-components-react';\nimport { Renew20, IotConnect20, Printer20 } from '@carbon/icons-react';\nimport Card from './Card';\nimport { getAgriBotInsights } from '../Actions';\n\nclass AgriBotInsightsDashboard extends React.Component {\n    state = {\n        pH: parseFloat((this.props.agriBotInsights.deviceResponse['arduino-uno'].soil.r+this.props.agriBotInsights.deviceResponse['arduino-uno'].soil.g)/(2*this.props.agriBotInsights.deviceResponse['arduino-uno'].soil.b)).toPrecision(2),\n        n: [6, 7.5],\n        p: [6.5, 7.5],\n        k: [6, 10],\n        s: [6, 10],\n        ca: [6.5, 7.5],\n        mg: [6.5, 8.5],\n        fe: [4, 6],\n        mn: [5, 7.5],\n        b: [5.5, 7],\n        cu: [5, 7],\n        zn: [5, 7],\n        mo: [8.5, 10]\n    }\n\n    constructor(props) {\n        super(props);\n        this.props.getAgriBotInsights();\n    }\n\n    _formatName = (text) => {\n        text = text.replace(\"_\", \" \");\n        text = text.toUpperCase();\n        return text;\n    }\n\n    _getNutrients = (name) => {\n        if(this.state.pH<this.state[name][0]){\n            return \"low\"\n        } else if(this.state.pH>this.state[name][1]){\n            return \"high\"\n        } else {\n            return \"moderate\"\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <br />\n                {this.props.agriBotInsights ?\n                    <Content style={{ backgroundColor: '#f4f4f4' }}>\n                        <Row>\n                            <Column style={{textAlign: 'center'}}>\n                                <Button onClick={() => window.location.reload()} renderIcon={Renew20}>Refresh</Button>&nbsp;&nbsp;\n                                <Button onClick={() => window.print()} renderIcon={Printer20}>Print</Button>\n                            </Column>\n                        </Row>\n                        <br />\n                        <Row id=\"printableArea\">\n                            <Column>\n                                {this.props.agriBotInsights.deviceResponse['arduino-uno'] && this.props.agriBotInsights.deviceResponse.bmp280 && this.props.agriBotInsights.deviceResponse.dht11 ?\n                                    <Card heading=\"AgriBot Data\" icon={<IotConnect20 />} subtitle={new Date(this.props.agriBotInsights.deviceResponse.timestamp).toLocaleString()}>\n                                        <hr />\n                                        <div className=\"card-body\">\n                                            <h4 className=\"card-body-head\">Environment Analytics</h4>\n                                        </div>\n                                        <br />\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Temperature</strong>\n                                            <span className=\"card-body-value\">{this.props.agriBotInsights.deviceResponse.dht11.env_temp}&deg;C</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Humidity</strong>\n                                            <span className=\"card-body-value\">{this.props.agriBotInsights.deviceResponse.dht11.env_humidity} %</span>\n                                        </div>\n                                        <hr />\n\n                                        <div className=\"card-body\">\n                                            <h4 className=\"card-body-head\">Soil Analytics</h4>\n                                        </div>\n                                        <br />\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Moisture</strong>\n                                            <span className=\"card-body-value\">{this.props.agriBotInsights.deviceResponse['arduino-uno'].soil.moist} m<sup>3</sup>/m<sup>3</sup></span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Temperature</strong>\n                                            <span className=\"card-body-value\">{this.props.agriBotInsights.deviceResponse.ds18b20.soil_temp}&deg;C</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Index</strong>\n                                            <span className=\"card-body-value\">{this.props.agriBotInsights.deviceResponse['arduino-uno'].soil.pH}</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">pH</strong>\n                                            <span className=\"card-body-value\">{this.state.pH}</span>\n                                        </div>\n\n                                        <hr />\n                                        <div className=\"card-body\">\n                                            <h4 className=\"card-body-head\">Air Analytics</h4>\n                                        </div>\n                                        <br />\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">AQI</strong>\n                                            <span className=\"card-body-value\">{this.props.agriBotInsights.deviceResponse['arduino-uno'].aqi}</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Air Pressure</strong>\n                                            <span className=\"card-body-value\">{this.props.agriBotInsights.deviceResponse.bmp280.air_pressure} hPa</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Air Temperature</strong>\n                                            <span className=\"card-body-value\">{this.props.agriBotInsights.deviceResponse.bmp280.air_temp}&deg;C</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Altitude</strong>\n                                            <span className=\"card-body-value\">{this.props.agriBotInsights.deviceResponse.bmp280.altitude} m</span>\n                                        </div>\n\n                                        <hr />\n                                        <div className=\"card-body\">\n                                            <h4 className=\"card-body-head\">Soil Nutrients Analytics</h4>\n                                        </div>\n                                        <br />\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Nitrogen (N)</strong>\n                                            <span className=\"card-body-value\">{this._getNutrients('n')}&nbsp;&nbsp;<svg height=\"10\" width=\"10\"><circle cx=\"50%\" cy=\"50%\" r=\"5\" className={`${this._getNutrients('n')}`} /></svg></span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Potassium (P)</strong>\n                                            <span className=\"card-body-value\">{this._getNutrients('p')}&nbsp;&nbsp;<svg height=\"10\" width=\"10\"><circle cx=\"50%\" cy=\"50%\" r=\"5\" className={`${this._getNutrients('p')}`} /></svg></span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Phosphorous (K)</strong>\n                                            <span className=\"card-body-value\">{this._getNutrients('k')}&nbsp;&nbsp;<svg height=\"10\" width=\"10\"><circle cx=\"50%\" cy=\"50%\" r=\"5\" className={`${this._getNutrients('k')}`} /></svg></span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Sulphur (S)</strong>\n                                            <span className=\"card-body-value\">{this._getNutrients('s')}&nbsp;&nbsp;<svg height=\"10\" width=\"10\"><circle cx=\"50%\" cy=\"50%\" r=\"5\" className={`${this._getNutrients('s')}`} /></svg></span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Calcium (Ca)</strong>\n                                            <span className=\"card-body-value\">{this._getNutrients('ca')}&nbsp;&nbsp;<svg height=\"10\" width=\"10\"><circle cx=\"50%\" cy=\"50%\" r=\"5\" className={`${this._getNutrients('ca')}`} /></svg></span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Magnesium (Mg)</strong>\n                                            <span className=\"card-body-value\">{this._getNutrients('mg')}&nbsp;&nbsp;<svg height=\"10\" width=\"10\"><circle cx=\"50%\" cy=\"50%\" r=\"5\" className={`${this._getNutrients('mg')}`} /></svg></span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Iron (Fe)</strong>\n                                            <span className=\"card-body-value\">{this._getNutrients('fe')}&nbsp;&nbsp;<svg height=\"10\" width=\"10\"><circle cx=\"50%\" cy=\"50%\" r=\"5\" className={`${this._getNutrients('fe')}`} /></svg></span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Manganese (Mn)</strong>\n                                            <span className=\"card-body-value\">{this._getNutrients('mn')}&nbsp;&nbsp;<svg height=\"10\" width=\"10\"><circle cx=\"50%\" cy=\"50%\" r=\"5\" className={`${this._getNutrients('mn')}`} /></svg></span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Boron (B)</strong>\n                                            <span className=\"card-body-value\">{this._getNutrients('b')}&nbsp;&nbsp;<svg height=\"10\" width=\"10\"><circle cx=\"50%\" cy=\"50%\" r=\"5\" className={`${this._getNutrients('b')}`} /></svg></span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Copper (Cu)</strong>\n                                            <span className=\"card-body-value\">{this._getNutrients('cu')}&nbsp;&nbsp;<svg height=\"10\" width=\"10\"><circle cx=\"50%\" cy=\"50%\" r=\"5\" className={`${this._getNutrients('cu')}`} /></svg></span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Zinc (Zn)</strong>\n                                            <span className=\"card-body-value\">{this._getNutrients('zn')}&nbsp;&nbsp;<svg height=\"10\" width=\"10\"><circle cx=\"50%\" cy=\"50%\" r=\"5\" className={`${this._getNutrients('zn')}`} /></svg></span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Molybdenum (Mo)</strong>\n                                            <span className=\"card-body-value\">{this._getNutrients('mo')}&nbsp;&nbsp;<svg height=\"10\" width=\"10\"><circle cx=\"50%\" cy=\"50%\" r=\"5\" className={`${this._getNutrients('mo')}`} /></svg></span>\n                                        </div>\n                                    </Card> : <></>}\n                            </Column>\n                        </Row>\n                        <br />\n                        <Row>\n                            <Column>\n                                {this.props.agriBotInsights.deviceResponse.plantdoc ?\n                                    <Card heading=\"PlantDoc Analytics\" icon={<img src={`https://www.klick.com/health/wp-content/uploads/2016/04/healthbot.jpg`} width=\"32px\" alt={\"plantDoc\"} />} subtitle={new Date(this.props.agriBotInsights.deviceResponse.plantdoc.report.dt).toLocaleString()}>\n                                        <div className=\"card-body\">\n                                            <img src={this.props.agriBotInsights.deviceResponse.plantdoc.url} alt=\"img\" width=\"500px\" />\n                                        </div>\n                                        <hr />\n                                        <div className=\"card-body\">\n                                            <h4 className=\"card-body-head\">Nutrient Deficiency Analysis Report</h4>\n                                        </div>\n                                        <br />\n                                        {this.props.agriBotInsights.deviceResponse.plantdoc.report.deficiencies?\n                                            this.props.agriBotInsights.deviceResponse.plantdoc.report.deficiencies.map(deficiency => {\n                                                return (\n                                                    <>\n                                                        <div className=\"card-body\">\n                                                            <strong className=\"card-body-head\">{this._formatName(deficiency.name)}</strong>\n                                                        </div>\n                                                        <div className=\"card-body\">\n                                                            <span className=\"card-body-head\">{deficiency.text}</span>\n                                                        </div>\n                                                    </>\n                                                )\n                                            }):\"\"\n                                        }\n                                        <hr />\n                                        <div className=\"card-body\">\n                                            <h4 className=\"card-body-head\">Disease Analysis Report</h4>\n                                        </div>\n                                        <br />\n                                        {this.props.agriBotInsights.deviceResponse.plantdoc.report.deficiencies?\n                                            this.props.agriBotInsights.deviceResponse.plantdoc.report.diseases.map(disease => {\n                                                return (\n                                                    <>\n                                                        <div className=\"card-body\">\n                                                            <strong className=\"card-body-head\">{this._formatName(disease.name)}</strong>\n                                                        </div>\n                                                        <div className=\"card-body\">\n                                                            <span className=\"card-body-head\">{disease.text}</span>\n                                                        </div>\n                                                    </>\n                                                )\n                                            }):\"\"\n                                        }\n                                    </Card> : \"Connecting to AgriBot...\"}\n                            </Column>\n                        </Row>\n                    </Content> : <></>}\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        fields: state.fields,\n        busy: state.busy,\n        agriBotInsights: state.agriBotInsights\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getAgriBotInsights: () => {\n            dispatch(getAgriBotInsights({}));\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AgriBotInsightsDashboard);\n","import React from 'react';\nimport {\n    Select,\n    SelectItem,\n    Row,\n    Column,\n    Button\n} from 'carbon-components-react';\nimport { connect } from 'react-redux';\n\nclass FieldSelector extends React.Component{\n    state = {\n        datetime: \"\",\n        datetimeupdater: \"\"\n    }\n\n    UNSAFE_componentWillMount = async() => {\n        let updater = setInterval(() => {\n            this.setState({datetime: new Date().toLocaleString()});\n        }, 100);\n        this.setState({datetimeupdater: updater});\n    }\n\n    componentWillUnmount(){\n        clearInterval(this.state.datetimeupdater);\n    }\n\n    render(){\n        return(\n            <Row>\n                <Column>\n                    <Button disabled kind=\"ghost\" size=\"field\">{this.state.datetime}</Button>\n                </Column>\n                <Column>\n                    <Select value={this.props.selectedField} onChange={this.props.onFieldChange} width={'xl'} id=\"agriBotDashboardfieldSelector\" inline>\n                        {\n                            this.props.fields?this.props.fields.map(field => {\n                                let seperator = field.fieldResId.lastIndexOf(\":\");\n                                let id = field.fieldResId.substring(seperator+1);\n                                return(\n                                    <SelectItem key={field.fieldResId} text={id} value={field.fieldResId} />\n                                )\n                            }):<></>\n                        }\n                    </Select>\n                </Column>\n            </Row>\n        )\n    }\n}\n\nconst mapStateToProps = (state) =>{\n    return {\n        fields: state.fields\n    }\n}\n\nexport default connect(mapStateToProps)(FieldSelector);\n","import React from 'react';\nimport FieldSelector from './FieldSelector';\nimport { connect } from 'react-redux';\nimport {\n    Row,\n    Column,\n    Content,\n    Slider\n} from 'carbon-components-react';\nimport Card from './Card';\nimport {\n    getSatelliteInsights\n} from '../Actions';\nimport {\n    Strawberry32,\n    Light32,\n    WatsonHealthDna32\n} from \"@carbon/icons-react\";\n\nclass SatelliteInsightsDashboard extends React.Component {\n    state = {\n        selectedField: this.props.fields && this.props.fields.length > 0 ? this.props.fields[0].fieldResId : \"\",\n        forecastWeatherSlider: 1\n    }\n\n    constructor(props) {\n        super(props);\n        this.props.getSatelliteInsights(this.state.selectedField);\n    }\n\n    _onFieldChange = async (e) => {\n        this.setState({ selectedField: e.target.value }, async () => {\n            await this.props.getSatelliteInsights(this.state.selectedField);\n        });\n    }\n\n    _onForecastWeatherSliderChange = (e) => {\n        this.setState({ forecastWeatherSlider: e.value });\n    }\n\n    render() {\n        return (\n            <>\n                <FieldSelector selectedField={this.state.selectedField} onFieldChange={this._onFieldChange} />\n                <br />\n                {this.props.satelliteInsights ?\n                    <Content style={{ backgroundColor: '#f4f4f4' }}>\n                        <Row>\n                            <Column>\n                                {this.props.satelliteInsights.weatherData ?\n                                    <Card heading=\"Current Weather\" icon={<img src={`https://openweathermap.org/img/w/${this.props.satelliteInsights.weatherData.weather[0].icon}.png`} alt={this.props.satelliteInsights.weatherData.weather.icon} />} subtitle={new Date(this.props.satelliteInsights.weatherData.dt * 1000).toLocaleString()}>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Temperature</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.weatherData.main.temp}&deg;C</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Feels like</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.weatherData.main.feels_like}&deg;C</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Temp Min</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.weatherData.main.temp_min}&deg;C</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Temp Max</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.weatherData.main.temp_max}&deg;C</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Atmospheric Pressure</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.weatherData.main.pressure} hPa</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Humidity</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.weatherData.main.humidity}%</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Atmospheric Pressure @ Sea Level</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.weatherData.main.sea_level} hPa</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Atmospheric Pressure @ Ground Level</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.weatherData.main.grnd_level} hPa</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Wind Speed</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.weatherData.wind.speed} m/s</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Wind Direction</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.weatherData.wind.deg}&deg;</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Cloudiness</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.weatherData.clouds.all}%</span>\n                                        </div>\n                                    </Card> : \"Getting Satellite based Weather card...\"}\n                            </Column>\n                            <Column>\n                                {this.props.satelliteInsights.satelliteImageryData ?\n                                    <Card heading=\"Crop Health\" icon={<WatsonHealthDna32 />} subtitle={`${new Date(this.props.satelliteInsights.satelliteImageryData[this.props.satelliteInsights.satelliteImageryData.length - 1].dt * 1000).toLocaleString()} by ${this.props.satelliteInsights.satelliteImageryData[this.props.satelliteInsights.satelliteImageryData.length - 1].type}`}>\n                                        <div className=\"card-body\">\n                                            <img width=\"100%\" src={`${this.props.satelliteInsights.satelliteImageryData[this.props.satelliteInsights.satelliteImageryData.length-1].image.ndvi.replace(\"http://\", \"https://\")}`} alt=\"satellite imagery\" />\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Valid Data</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.satelliteImageryData[this.props.satelliteInsights.satelliteImageryData.length - 1].dc}%</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Cloudiness</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.satelliteImageryData[this.props.satelliteInsights.satelliteImageryData.length - 1].cl}%</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">NDVI</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.ndviStatsData.mean.toPrecision(2)}&nbsp;&nbsp;<svg height=\"10\" width=\"10\"><circle cx=\"50%\" cy=\"50%\" r=\"5\" className={`anti-gradient_${this.props.satelliteInsights.ndviStatsData.mean.toPrecision(1) * 10}`} /></svg></span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">EVI</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.eviStatsData.mean.toPrecision(2)}&nbsp;&nbsp;<svg height=\"10\" width=\"10\"><circle cx=\"50%\" cy=\"50%\" r=\"5\" className={`anti-gradient_${this.props.satelliteInsights.eviStatsData.mean.toPrecision(1) * 10}`} /></svg></span>\n                                        </div>\n                                        <div className=\"bx--form__helper-text\" style={{ maxWidth: '100%' }}>\n                                            This card may take a bit to update, please be patient.\n                                </div>\n                                    </Card> : \"Getting Satellite based Crop Health card...\"}\n                            </Column>\n                        </Row>\n                        <br />\n                        <Row>\n                            <Column>\n                                {this.props.satelliteInsights.soilData ?\n                                    <Card heading=\"Soil Data\" icon={<Strawberry32 />} subtitle={new Date(this.props.satelliteInsights.soilData.dt * 1000).toLocaleString()}>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Surface Temp</strong>\n                                            <span className=\"card-body-value\">{(this.props.satelliteInsights.soilData.t0 - 273.15).toPrecision(4)}&deg;C</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Temp in 10cm depth</strong>\n                                            <span className=\"card-body-value\">{(this.props.satelliteInsights.soilData.t10 - 273.15).toPrecision(4)}&deg;C</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Moisture</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.soilData.moisture} m<sup>3</sup>/m<sup>3</sup></span>\n                                        </div>\n                                    </Card> : \"Getting Satellite based Soil Data card...\"}\n                            </Column>\n                            <Column>\n                                {this.props.satelliteInsights.uviData ?\n                                    <Card heading=\"UVI Data\" icon={<Light32 />} subtitle={new Date(this.props.satelliteInsights.uviData.dt * 1000).toLocaleString()}>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">UV Index</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.uviData.uvi}</span>\n                                        </div>\n                                    </Card> : \"Getting Satellite based UVI Data card...\"}\n                            </Column>\n                        </Row>\n                        <br />\n                        <Row>\n                            <Column>\n                                {this.props.satelliteInsights.forecastWeatherData ?\n                                    <Card heading=\"Weather Forecast\" icon={<img src={`https://openweathermap.org/img/w/${this.props.satelliteInsights.forecastWeatherData[this.state.forecastWeatherSlider - 1].weather[0].icon}.png`} alt={this.props.satelliteInsights.forecastWeatherData[this.state.forecastWeatherSlider - 1].icon} />} subtitle={new Date(this.props.satelliteInsights.forecastWeatherData[this.state.forecastWeatherSlider - 1].dt * 1000).toLocaleString()}>\n                                        <div className=\"card-body\">\n                                            <Slider id=\"slider\" inputType=\"number\" labelText=\"Slide for changing data\" max={40} min={1} step={1} onChange={this._onForecastWeatherSliderChange} value={this.state.forecastWeatherSlider} />\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Temperature</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.forecastWeatherData[this.state.forecastWeatherSlider - 1].main.temp}&deg;C</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Feels like</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.forecastWeatherData[this.state.forecastWeatherSlider - 1].main.feels_like}&deg;C</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Temp Min</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.forecastWeatherData[this.state.forecastWeatherSlider - 1].main.temp_min}&deg;C</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Temp Max</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.forecastWeatherData[this.state.forecastWeatherSlider - 1].main.temp_max}&deg;C</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Atmospheric Pressure</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.forecastWeatherData[this.state.forecastWeatherSlider - 1].main.pressure} hPa</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Humidity</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.forecastWeatherData[this.state.forecastWeatherSlider - 1].main.humidity}%</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Atmospheric Pressure @ Sea Level</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.forecastWeatherData[this.state.forecastWeatherSlider - 1].main.sea_level} hPa</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Atmospheric Pressure @ Ground Level</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.forecastWeatherData[this.state.forecastWeatherSlider - 1].main.grnd_level} hPa</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Wind Speed</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.forecastWeatherData[this.state.forecastWeatherSlider - 1].wind.speed} m/s</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Wind Direction</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.forecastWeatherData[this.state.forecastWeatherSlider - 1].wind.deg}&deg;</span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <strong className=\"card-body-head\">Cloudiness</strong>\n                                            <span className=\"card-body-value\">{this.props.satelliteInsights.forecastWeatherData[this.state.forecastWeatherSlider - 1].clouds.all}%</span>\n                                        </div>\n                                    </Card> : \"Getting Satellite based Weather Forecast card...\"}\n                            </Column>\n                        </Row>\n                    </Content> : <></>}\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user,\n        fields: state.fields,\n        satelliteInsights: state.satelliteInsights\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getSatelliteInsights: (fieldResId) => {\n            dispatch(getSatelliteInsights({ fieldResId }));\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SatelliteInsightsDashboard);\n","import React from 'react';\nimport {\n    Row,\n    ContentSwitcher,\n    Switch,\n    Grid\n} from 'carbon-components-react';\nimport { getFields } from '../Actions';\nimport { connect } from 'react-redux';\nimport AgriBotInsightsDashboard from '../components/AgriBotInsightsDashboard';\nimport SatelliteInsightsDashboard from '../components/SatelliteInsightsDashboard';\n\nclass Dashboard extends React.Component {\n    state = {\n        selectedField: '',\n        selectedTab: 0\n    }\n\n    constructor(props) {\n        super(props);\n        this._setEnvironment();\n    }\n\n    _setEnvironment = async () => {\n        if (this.props.user) {\n            await this.props.getFields(this.props.user.email);\n        }\n    }\n\n    _handleContentChange = (e) => {\n        this.setState({ selectedTab: e.index })\n    }\n\n    render() {\n        return (\n            <>\n                {\n                    !this.props.user ? <div>You're not logged in</div> :\n                        <Grid>\n                            <Row>\n                                <ContentSwitcher selectedIndex={this.state.selectedTab} onChange={this._handleContentChange}>\n                                    <Switch name=\"satelliteInsights\" text=\"&nbsp;Satellite\" />\n                                    <Switch name=\"agriBotInsights\" text=\"&nbsp;AgriBot\" />\n                                </ContentSwitcher>\n                            </Row>\n                            <Grid>\n                                {\n                                    this.state.selectedTab === 0 ?\n                                        <SatelliteInsightsDashboard /> :\n                                        <AgriBotInsightsDashboard />\n                                }\n                            </Grid>\n                        </Grid>\n                }\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user,\n        fields: state.fields,\n        busy: state.busy\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getFields: (email) => {\n            dispatch(getFields({email}));\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n","import React from 'react';\n\nexport default class Chat extends React.Component {\n    render(){\n        return(\n            <div>Chat</div>\n        )\n    }\n}","import React from 'react';\n\nexport default class FAQ extends React.Component {\n    render(){\n        return(\n            <div>FAQ</div>\n        )\n    }\n}","import React from 'react';\n\nexport default class Recovery extends React.Component {\n    render(){\n        return(\n            <div>Recovery</div>\n        )\n    }\n}","import React from 'react';\nimport {\n    Grid,\n    Row,\n    Column,\n    DataTable,\n    Button,\n    Select,\n    SelectItem,\n    Form\n} from 'carbon-components-react';\nimport { getGeolocation, getFields, getCrops, newCrop, newField, deleteField, deleteCrop } from '../Actions';\nimport { connect } from 'react-redux';\nimport Map from 'pigeon-maps';\nimport TrashCan20 from \"@carbon/icons-react/lib/trash-can/20\";\nimport Add20 from \"@carbon/icons-react/lib/add/20\";\nconst cropsDetails = require('../brain.json');\nconst {\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableBody,\n    TableCell,\n    TableHeader,\n} = DataTable;\n\nclass Configure extends React.Component {\n    state = {\n        selectedCrop: 'FR01',\n        fieldGeoJSON: {},\n        fieldName: Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n    }\n\n    constructor(props) {\n        super(props);\n        this._setEnvironment();\n    }\n\n    _setEnvironment = () => {\n        if (this.props.user) {\n            this.props.retrieveGeolocation();\n            this.props.retrieveCrops(this.props.user.email);\n            this.props.retrieveFields(this.props.user.email);\n        }\n    }\n\n    _handleChangeCropSelection = (evt) => {\n        this.setState({ selectedCrop: evt.target.value });\n    }\n\n    _handleAddCrop = async () => {\n        if (this.props.user) {\n            let crop = cropsDetails.filter((crop) => {\n                return crop.cropId === this.state.selectedCrop;\n            });\n            await this.props.addCrop(this.props.user.email, this.state.selectedCrop, crop[0].name);\n        }\n    }\n\n    _handleAddField = async () => {\n        if (this.props.user) {\n            await this.props.addField(this.props.user.email, this.state.fieldGeoJSON);\n        }\n    }\n\n    deleteField = async (fieldId) => {\n        if (this.props.user) {\n            await this.props.removeField(this.props.user.email, fieldId);\n        }\n    }\n\n    deleteCrop = async (cropId) => {\n        if (this.props.user) {\n            await this.props.removeCrop(this.props.user.email, cropId);\n        }\n    }\n\n    provider = {\n        osm: (x, y, z) => {\n            const s = String.fromCharCode(97 + (x + y + z) % 3)\n            return `https://${s}.tile.openstreetmap.org/${z}/${x}/${y}.png`\n        },\n        wikimedia: (x, y, z, dpr) => {\n            return `https://maps.wikimedia.org/osm-intl/${z}/${x}/${y}${dpr >= 2 ? '@2x' : ''}.png`\n        },\n        stamen: (x, y, z, dpr) => {\n            return `https://stamen-tiles.a.ssl.fastly.net/terrain/${z}/${x}/${y}${dpr >= 2 ? '@2x' : ''}.jpg`\n        }\n    }\n\n    _handleMapBoundChange = (data) => {\n        let ne = [data.bounds.ne[1], data.bounds.ne[0]];\n        let sw = [data.bounds.sw[1], data.bounds.sw[0]];\n        let nw = [sw[0], ne[1]];\n        let se = [ne[0], sw[1]];\n        let format = {\n            \"name\": this.state.fieldName,\n            \"geo_json\": {\n                \"type\": \"FeatureCollection\",\n                \"features\": [\n                    {\n                        \"type\": \"Feature\",\n                        \"properties\": {},\n                        \"geometry\": {\n                            \"type\": \"Polygon\",\n                            \"coordinates\": [\n                                [\n                                    sw,\n                                    se,\n                                    ne,\n                                    nw,\n                                    sw,\n                                ]\n                            ]\n                        }\n                    }\n                ]\n            }\n        }\n        this.setState({ fieldGeoJSON: format });\n    }\n\n    render() {\n        return (\n            <>\n                {\n                    !this.props.user ?\n                        <div>You're not logged in</div> :\n                        <Grid>\n                            <Row>\n                                <h2 style={{ width: '100%', textAlign: 'center' }}>Fields Section</h2>\n                            </Row>\n                            <br />\n                            <Row>\n                                <Column sm={4} lg={6} style={{ textAlign: 'center' }}>\n                                    <Map center={this.props.geolocation ? this.props.geolocation : [21, 73]} animate={true} zoom={12} height={300} onBoundsChanged={this._handleMapBoundChange} provider={this.provider['osm']} />\n                                    <div className=\"bx--form__helper-text\" style={{ maxWidth: '100%' }}>\n                                        Zoom to your fields (1 Ha to 3000 Ha) and click on button below.\n                                        </div>\n                                    <Button renderIcon={Add20} onClick={this._handleAddField}>\n                                        Add\n                                        </Button>\n                                </Column>\n                                <Column sm={4} lg={6}>\n                                    <TableContainer title=\"Your Fields\">\n                                        <Table>\n                                            <TableHead>\n                                                <TableRow>\n                                                    <TableHeader key=\"fieldId\">\n                                                        Field Id\n                                                </TableHeader>\n                                                    <TableHeader key=\"fieldLoc\">\n                                                        Field Location\n                                                </TableHeader>\n                                                    <TableHeader key=\"delete\">\n\n                                                    </TableHeader>\n                                                </TableRow>\n                                            </TableHead>\n                                            <TableBody>\n                                                {\n                                                    !this.props.fields ?\n                                                        <TableRow key={\"no-fields\"}>\n                                                            <TableCell colspan={3}>\n                                                                Receiving your fields...\n                                                            </TableCell>\n                                                        </TableRow> :\n                                                        this.props.fields.length < 1 ?\n                                                            <TableRow key={\"no-fields\"}>\n                                                                <TableCell colspan={3}>\n                                                                    No fields yet\n                                                                </TableCell>\n                                                            </TableRow> :\n                                                            this.props.fields.map(field => {\n                                                                let seperator = field.fieldResId.lastIndexOf(\":\");\n                                                                let id = field.fieldResId.substring(seperator + 1);\n                                                                let pt1 = field.data.geo_json.features[0].geometry.coordinates[0][0];\n                                                                let pt2 = field.data.geo_json.features[0].geometry.coordinates[0][2];\n                                                                return (\n                                                                    <TableRow key={field.fieldResId}>\n                                                                        <TableCell>\n                                                                            {id}\n                                                                        </TableCell>\n                                                                        <TableCell>\n                                                                            {pt1[0] + \"\\n\" + pt1[1] + \"\\n\" + pt2[0] + \"\\n\" + pt2[1]}\n                                                                        </TableCell>\n                                                                        <TableCell>\n                                                                            <Button\n                                                                                kind=\"ghost\"\n                                                                                tabIndex={0}\n                                                                                hasonlyicon=\"true\"\n                                                                                renderIcon={TrashCan20}\n                                                                                iconDescription=\"Delete\"\n                                                                                onClick={() => { this.deleteField(id) }}\n                                                                            />\n                                                                        </TableCell>\n                                                                    </TableRow>\n                                                                )\n                                                            })\n                                                }\n                                            </TableBody>\n                                        </Table>\n                                    </TableContainer>\n                                </Column>\n                            </Row>\n                            <br />\n                            <Row>\n                                <h2 style={{ width: '100%', textAlign: 'center' }}>Crops Section</h2>\n                            </Row>\n                            <br />\n                            <Row>\n                                <Column sm={4} lg={6}>\n                                    <Form>\n                                        <Select\n                                            id=\"crop-selector\"\n                                            helperText=\"Select crop to add\"\n                                            labelText=\"Crop\"\n                                            inline={false}\n                                            defaultValue={this.state.selectedCrop}\n                                            onChange={this._handleChangeCropSelection}\n                                        >\n                                            {\n                                                cropsDetails.map(crop => {\n                                                    return (\n                                                        <SelectItem key={crop.cropId} text={crop.name} value={crop.cropId} />\n                                                    )\n                                                })\n                                            }\n                                        </Select>\n                                        <br />\n                                        <Button\n                                            renderIcon={Add20}\n                                            onClick={this._handleAddCrop}\n                                        >\n                                            Add\n                                    </Button>\n                                    </Form>\n                                </Column>\n                                <Column sm={4} lg={6}>\n                                    <TableContainer>\n                                        <Table>\n                                            <TableHead>\n                                                <TableRow>\n                                                    <TableHeader key=\"cropId\">\n                                                        Crop Id\n                                                </TableHeader>\n                                                    <TableHeader key=\"cropName\">\n                                                        Crop Name\n                                                </TableHeader>\n                                                    <TableHeader key=\"delete\">\n\n                                                    </TableHeader>\n                                                </TableRow>\n                                            </TableHead>\n                                            <TableBody>\n                                                {\n                                                    !this.props.crops ?\n                                                        <TableRow key={\"no-crops\"}>\n                                                            <TableCell colspan={3}>\n                                                                Receiving your crops...\n                                                            </TableCell>\n                                                        </TableRow> :\n                                                        this.props.crops.length < 1 ?\n                                                            <TableRow key={\"no-crops\"}>\n                                                                <TableCell colspan={3}>\n                                                                    No crops yet\n                                                        </TableCell>\n                                                            </TableRow> :\n                                                            this.props.crops.map(crop => {\n                                                                return (\n                                                                    <TableRow key={crop.cropId}>\n                                                                        <TableCell>\n                                                                            {crop.cropId}\n                                                                        </TableCell>\n                                                                        <TableCell>\n                                                                            {crop.name}\n                                                                        </TableCell>\n                                                                        <TableCell>\n                                                                            <Button\n                                                                                kind=\"ghost\"\n                                                                                tabIndex={0}\n                                                                                hasonlyicon=\"true\"\n                                                                                renderIcon={TrashCan20}\n                                                                                iconDescription=\"Delete\"\n                                                                                onClick={() => { this.deleteCrop(crop.cropId) }}\n                                                                            />\n                                                                        </TableCell>\n                                                                    </TableRow>\n                                                                )\n                                                            })\n                                                }\n                                            </TableBody>\n                                        </Table>\n                                    </TableContainer>\n                                </Column>\n                            </Row>\n                        </Grid>\n                }\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user,\n        fields: state.fields,\n        crops: state.crops,\n        busy: state.busy,\n        geolocation: state.geolocation\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addCrop: (owner, cropId, name) => {\n            dispatch(newCrop({ owner, cropId, name }))\n        },\n        removeCrop: (owner, cropId) => {\n            dispatch(deleteCrop({ owner, cropId }));\n        },\n        addField: (owner, data) => {\n            dispatch(newField({ owner, data }));\n        },\n        removeField: (owner, fieldId) => {\n            dispatch(deleteField({ owner, fieldId }));\n        },\n        retrieveCrops: (email) => {\n            dispatch(getCrops({ email }));\n        },\n        retrieveFields: (email) => {\n            dispatch(getFields({ email }));\n        },\n        retrieveGeolocation: () => {\n            dispatch(getGeolocation());\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Configure);","import React from 'react';\nimport {\n    Grid,\n    Column,\n    Row\n} from 'carbon-components-react/lib/components/Grid';\n\nexport default class Content extends React.Component {\n    render(){\n        return(\n            <Grid>\n                <Row>\n                    <Column>\n                        {\n                            this.props.children\n                        }\n                    </Column>\n                </Row>\n            </Grid>\n        )\n    }\n}","import React from 'react';\nimport AppLayout from './components/AppLayout';\nimport Splash from './pages/Splash';\nimport Dashboard from './pages/Dashboard';\nimport Chat from './pages/Chat';\nimport FAQ from './pages/FAQ';\nimport Recovery from './pages/Recovery';\nimport Configure from './pages/Configure';\nimport Content from './components/Content';\nimport './App.css';\nimport { Route, HashRouter } from 'react-router-dom';\nimport { Loading } from 'carbon-components-react';\nimport { connect } from 'react-redux';\n\nclass App extends React.Component {\n  render(){\n    return (\n      <>\n        <Loading active={this.props.busy===true || this.props.satelliteBusy===true || this.props.agriBotBusy===true} description={\"Working on it, please wait...\"} withOverlay={true} small={false} />\n        <AppLayout >\n          <HashRouter>\n            <Content>\n              <Route exact path=\"/\" render={() => <Splash />}></Route>\n              <Route exact path=\"/home\" render={() => <Splash />}></Route>\n              <Route path=\"/dashboard\" render={() => <Dashboard/>}></Route>\n              <Route path=\"/chat\" render={() => <Chat/>}></Route>\n              <Route path=\"/faq\" render={() => <FAQ/>}></Route>\n              <Route path=\"/recovery\" render={() => <Recovery/>}></Route>\n              <Route path=\"/configure\" render={() => <Configure />}></Route>\n            </Content>\n          </HashRouter>\n        </AppLayout>\n      </>\n    );\n  }\n}\n\nfunction mapStateToProps(state){\n  return {\n    busy: state.busy,\n    satelliteBusy: state.satelliteBusy,\n    agriBotBusy: state.agriBotBusy\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'carbon-components/css/carbon-components.css';\nimport store from './Store';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { saveState } from './localStorage';\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}