{"version":3,"sources":["Store.js","localStorage.js","Reducer.js","Actions.js","components/TaskBar.js","pages/Splash.js","pages/Dashboard.js","pages/Chat.js","pages/FAQ.js","pages/Recovery.js","pages/Configure.js","App.js","serviceWorker.js","index.js"],"names":["enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","persistedState","serializedState","localStorage","getItem","console","log","JSON","parse","err","loadState","store","createStore","state","action","type","alert","user","payload","fields","crops","last","serverURL","loginUser","email","password","a","variables","fetch","method","headers","body","stringify","query","then","data","json","login","catch","getFields","getCrops","addCrop","owner","cropId","name","resp","removeField","fieldId","error","removeCrop","TaskBar","_handleLogout","setItem","dispatch","className","href","alt","src","to","this","props","onClick","React","Component","connect","Splash","busy","_handleLoginSubmit","evt","preventDefault","setState","_handleEmailChange","target","value","_handlePasswordChange","photo","htmlFor","id","readOnly","onSubmit","onChange","placeholder","required","aria-hidden","Dashboard","Chat","FAQ","Recovery","cropsDetails","require","Configure","busyAdding","busyDeleting","selectedCrop","_handleEnvironmentPrepare","_handleChangeCropSelection","_handleAddCrop","crop","filter","location","reload","deleteField","deleteCrop","length","map","field","key","coordinates","disabled","colSpan","App","exact","path","render","Boolean","hostname","match","subscribe","saveState","getState","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2cfbb60a.chunk.js","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { reducer } from './Reducer';\r\nimport { loadState } from './localStorage';\r\n\r\nconst composeEnhancers = typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\nconst enhancer = composeEnhancers(\r\n  applyMiddleware(thunk),\r\n);\r\nconst persistedState = loadState() || {};\r\nconst store = createStore(reducer, persistedState, enhancer);\r\n\r\nexport default store;","export const loadState = () => {\r\n    try{\r\n        const serializedState = localStorage.getItem('projectkisaanstate');\r\n        if(serializedState === null){\r\n            return undefined;\r\n        }\r\n        console.log(\"state loaded\");\r\n        return JSON.parse(serializedState);\r\n    } catch(err){\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport const saveState = (state) => {\r\n    try{\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('projectkisaanstate', serializedState);\r\n        console.log(\"state saved\");\r\n    } catch(err){\r\n        console.log(err);\r\n    }\r\n}","export const reducer = (state, action) => {\r\n    switch(action.type) {\r\n        case \"LOGIN_FAILED\": {\r\n            alert('No such user found. Check your email and password again.');\r\n            return {\r\n                ...state,\r\n                user: \"\"\r\n            };\r\n        }\r\n        case \"LOGIN_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                user: action.payload\r\n            }\r\n        }\r\n        case \"LOGOUT\": {\r\n            return {\r\n                ...state,\r\n                user: \"\"\r\n            };\r\n        }\r\n        case \"FIELDS_RETRIEVAL_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                fields: action.payload\r\n            }\r\n        }\r\n        case \"FIELDS_RETRIEVAL_FAILED\": {\r\n            return {\r\n                ...state,\r\n                fields: \"\"\r\n            }\r\n        }\r\n        case \"CROPS_RETRIEVAL_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                crops: action.payload\r\n            }\r\n        }\r\n        case \"CROPS_RETRIEVAL_FAILED\": {\r\n            return {\r\n                ...state,\r\n                crops: \"\"\r\n            }\r\n        }\r\n        case \"CROP_ADD_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                last: \"crop_added\"\r\n            }\r\n        }\r\n        case \"CROP_ADD_FAILED\": {\r\n            return {\r\n                ...state,\r\n                last: \"crop_not_added\"\r\n            }\r\n        }\r\n        case \"FIELD_REMOVAL_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                last: \"field_deleted\"\r\n            }\r\n        }\r\n        case \"FIELD_REMOVAL_FAILED\": {\r\n            return {\r\n                ...state,\r\n                last: \"field_not_deleted\"\r\n            }\r\n        }\r\n        case \"CROP_REMOVAL_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                last: \"crop_deleted\"\r\n            }\r\n        }\r\n        case \"CROP_REMOVAL_FAILED\": {\r\n            return {\r\n                ...state,\r\n                last: \"crop_not_deleted\"\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","const serverURL= \"https://project-kisaan-graphql-server.herokuapp.com/graphql\";\r\n\r\nexport const loginUser = async(email, password) => {\r\n    let query = `query login($email: String, $password: String){login(email: $email, password: $password){name photo email}}`;\r\n    let variables = { email, password };\r\n\r\n    return user => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.login){\r\n                user({\r\n                    type: \"LOGIN_SUCCESS\",\r\n                    payload: body.data.login\r\n                });\r\n            } else {\r\n                user({\r\n                    type: \"LOGIN_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            user({\r\n                type: \"LOGIN_FAILED\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const logoutUser = () => {\r\n    return user => {\r\n        user({\r\n            type: \"LOGOUT\",\r\n        })\r\n    }\r\n}\r\n\r\nexport const getFields = async(email) => {\r\n    let query = `query fields($email: String){fields(email: $email){fieldId location{coordinates}}}`;\r\n    let variables = { email };\r\n    return fields => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.fields){\r\n                fields({\r\n                    type: \"FIELDS_RETRIEVAL_SUCCESS\",\r\n                    payload: body.data.fields\r\n                });\r\n            } else {\r\n                fields({\r\n                    type: \"FIELDS_RETRIEVAL_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            fields({\r\n                type: \"FIELDS_RETRIEVAL_FAILED\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const getCrops = async(email) => {\r\n    let query = `query crops($email: String){crops(email: $email){cropId name}}`;\r\n    let variables = { email };\r\n    return crops => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.crops){\r\n                crops({\r\n                    type: \"CROPS_RETRIEVAL_SUCCESS\",\r\n                    payload: body.data.crops\r\n                });\r\n            } else {\r\n                crops({\r\n                    type: \"CROPS_RETRIEVAL_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            crops({\r\n                type: \"CROPS_RETRIEVAL_FAILED\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const addCrop = async(owner, cropId, name) => {\r\n    let query = `mutation addCrop($owner: String, $cropId: String, $name: String){createCrop(owner: $owner, cropId: $cropId, name: $name){cropId}}`;\r\n    let variables = { cropId, name, owner };\r\n    return resp => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.cropId){\r\n                resp({\r\n                    type: \"CROP_ADD_SUCCESS\",\r\n                });\r\n            } else {\r\n                resp({\r\n                    type: \"CROP_ADD_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            resp({\r\n                type: \"CROP_ADD_FAILED\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const removeField = async(fieldId) => {\r\n    let query = `mutation deleteField($fieldId: String){removeField(fieldId: $fieldId)}`;\r\n    let variables = { fieldId };\r\n    return resp => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body){\r\n                resp({\r\n                    type: \"FIELD_REMOVAL_SUCCESS\",\r\n                });\r\n            } else {\r\n                resp({\r\n                    type: \"FIELD_REMOVAL_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.error(err);\r\n        });\r\n    }\r\n}\r\n\r\nexport const removeCrop = async(cropId) => {\r\n    let query = `mutation deleteCrop($cropId: String){removeCrop(cropId: $cropId)}`;\r\n    let variables = { cropId };\r\n    return resp => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body){\r\n                resp({\r\n                    type: \"CROP_REMOVAL_SUCCESS\",\r\n                });\r\n            } else {\r\n                resp({\r\n                    type: \"CROP_REMOVAL_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.error(err);\r\n        });\r\n    }\r\n}","import React from 'react';\r\nimport {\r\n  Link,\r\n  HashRouter\r\n} from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport { logoutUser } from '../Actions';\r\nimport store from '../Store';\r\n\r\nclass TaskBar extends React.Component {\r\n\r\n  _handleLogout = () => {\r\n    localStorage.setItem('projectkisaanstate', '');\r\n    store.dispatch(logoutUser());\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <>\r\n        <div className=\"header\">\r\n          <div className=\"home-menu pure-menu pure-menu-horizontal pure-menu-fixed pure-menu-scrollable\">\r\n              <a className=\"pure-menu-heading\" href=\"#\"><img alt=\"Logo\" src=\"img/logo-16.png\"/>&nbsp;<strong>Project Kisaan</strong> - Team EDGE</a>\r\n              <ul className=\"pure-menu-list\">\r\n                <HashRouter>\r\n                  <li className=\"pure-menu-item pure-menu-selected\"><Link to=\"/\" className=\"pure-menu-link\">Home</Link></li>\r\n                  {this.props.user?<><li className=\"pure-menu-item\"><Link to=\"/dashboard\" className=\"pure-menu-link\">Dashboard</Link></li><li className=\"pure-menu-item\"><Link to=\"/chat\" className=\"pure-menu-link\">Chat</Link></li><li className=\"pure-menu-item\"><Link to=\"/configure\" className=\"pure-menu-link\">Configure</Link></li></>:\"\"}\r\n                  <li className=\"pure-menu-item\"><Link to=\"/faq\" className=\"pure-menu-link\">Assistance/FAQs</Link></li>\r\n                </HashRouter>\r\n              </ul>\r\n          </div>\r\n        </div>\r\n          <div className=\"footer l-box is-center\">\r\n            {!this.props.user?<>You're not logged in.</>:<>Welcome {this.props.user.name} ({this.props.user.email}). Click here to <a href=\"#\" onClick={this._handleLogout}>logout</a></>}\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n  return {\r\n    user: state.user\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TaskBar);\r\n","import React from 'react';\r\nimport store from '../Store';\r\nimport { loginUser } from '../Actions';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Splash extends React.Component {\r\n    state = {\r\n        email: \"\",\r\n        password: \"\",\r\n        busy: false,\r\n    }\r\n    componentWillReceiveProps(){\r\n        this.setState({busy: false, email: \"\", password: \"\"});\r\n    }\r\n    _handleLoginSubmit = async(evt) => {\r\n        evt.preventDefault();\r\n        this.setState({busy: true});\r\n        store.dispatch(await loginUser(this.state.email, this.state.password));\r\n    }\r\n    _handleEmailChange = (evt) => {\r\n        this.setState({email: evt.target.value});\r\n    }\r\n    _handlePasswordChange = (evt) => {\r\n        this.setState({password: evt.target.value});\r\n    }\r\n    render(){\r\n        return(\r\n            <>\r\n                <div className=\"splash-container\">\r\n                    <div className=\"splash\">\r\n                        <h1 className=\"splash-head\"><img alt=\"Splash\" src=\"img/logo-128.png\"/></h1>\r\n                        <p className=\"splash-subhead\">\r\n                            Project Kisaan - As the name suggests, it's all about Kissan.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"content-wrapper\">\r\n                    <div className=\"content\">\r\n                        <h2 className=\"content-head is-center\">Features</h2>\r\n                        <div className=\"pure-g\">\r\n                            <div className=\"l-box pure-u-1 pure-u-md-1-2 pure-u-lg-1-4\">\r\n                                <h3 className=\"content-subhead\">\r\n                                    <i className=\"fa fa-cogs\"></i>\r\n                                    IoT Based\r\n                                </h3>\r\n                                <p>\r\n                                    AgriBot is a IoT based robot which keeps an eye over your fields and crops and keeps you updated.\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"l-box pure-u-1 pure-u-md-1-2 pure-u-lg-1-4\">\r\n                                <h3 className=\"content-subhead\">\r\n                                    <i className=\"fa fa-users\"></i>\r\n                                    User Friendly\r\n                                </h3>\r\n                                <p>(\r\n                                    The AgriBot and Project Kisaan web application requires almost negligible input which makes it very user friendly.\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"l-box pure-u-1 pure-u-md-1-2 pure-u-lg-1-4\">\r\n                                <h3 className=\"content-subhead\">\r\n                                    <i className=\"fa fa-eye\"></i>\r\n                                    Crop Saviour\r\n                                </h3>\r\n                                <p>\r\n                                    AgriBot comes with a rotatable high-res camera which enables it to detect insects and diseases very accurately.\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"l-box pure-u-1 pure-u-md-1-2 pure-u-lg-1-4\">\r\n                                <h3 className=\"content-subhead\">\r\n                                    <i className=\"fa fa-info\"></i>\r\n                                    Lifetime Assistance\r\n                                </h3>\r\n                                <p>\r\n                                    Project Kisaan team would be very happy to help you anytime anywhere until it's alive.\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <h2 className=\"content-head is-center\">{!this.props.user?\"Login to continue...\":\"More information...\"}</h2>\r\n                        <div className=\"pure-g\">\r\n                            <div className=\"l-box-lrg pure-u-1 pure-u-md-2-5\">\r\n                                {\r\n                                    !this.props.user?\r\n                                    <form className=\"pure-form pure-form-stacked\" onSubmit={this._handleLoginSubmit}>\r\n                                        <fieldset>\r\n                                            <label htmlFor=\"email\">Your Email</label>\r\n                                            <input id=\"email\" type=\"email\" value={this.state.email} onChange={this._handleEmailChange} placeholder=\"mark@example.com\" required/>\r\n                                            <label htmlFor=\"password\">Your Password</label>\r\n                                            <input id=\"password\" type=\"password\" value={this.state.password} onChange={this._handlePasswordChange} placeholder=\"*****\" required/>\r\n                                            <button type=\"submit\" className=\"pure-button\">\r\n                                                {this.state.busy?<i className=\"fa fa-spin fa-spinner\" aria-hidden=\"true\"></i>:\"\"}\r\n                                                {this.state.busy?\" Wait\":\"Login\"}\r\n                                            </button>\r\n                                        </fieldset>\r\n                                        <p>Trouble logging in? <Link to=\"/recovery\">Help</Link></p>\r\n                                    </form>:\r\n                                    <form className=\"pure-form pure-form-stacked\">\r\n                                        <div className=\"avatar-container\">\r\n                                            <img src={this.props.user.photo} className=\"avatar\" alt=\"Avatar\"></img>\r\n                                        </div>\r\n                                        <fieldset>\r\n                                            <label htmlFor=\"email\">Your Email</label>\r\n                                            <input id=\"email\" type=\"email\" value={this.props.user.email} readOnly/>\r\n                                            <label htmlFor=\"name\">Your Name</label>\r\n                                            <input id=\"name\" type=\"text\" value={this.props.user.name} readOnly/>\r\n                                        </fieldset>\r\n                                    </form>\r\n                                }\r\n                            </div>\r\n                            <div className=\"l-box-lrg pure-u-1 pure-u-md-3-5\">\r\n                                <h4>Contact Us</h4>\r\n                                <p>\r\n                                    Our team is there to help you 24x7. You can clear your questions or doubts in our <a href=\"#\">Assistance/FAQs</a> section.\r\n                                    More more information, you can mail us at <a href=\"mailto:help.projectkisaan@mail.com\">help.projectkisaan@mail.com</a>.\r\n                                </p>\r\n                                <h4>Interested in AgriBot?</h4>\r\n                                <p>\r\n                                    You can express your interest for purchasing AgriBot by writing to us at <a href=\"mailto:purchase.projectkisaan@mail.com\">purchase.projectkisaan@mail.com</a>.\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )   \r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n      user: state.user\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Splash);","import React from 'react';\r\n\r\nexport default class Dashboard extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>Dashboard</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Chat extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>Chat</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class FAQ extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>FAQ</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Recovery extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>Recovery</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport store from '../Store';\r\nimport { getFields, getCrops, addCrop, removeField, removeCrop } from '../Actions';\r\nimport { connect } from 'react-redux';\r\nconst cropsDetails = require('../brain.json');\r\n\r\nclass Configure extends React.Component{\r\n    state = {\r\n        busyAdding: false,\r\n        busyDeleting: false,\r\n        selectedCrop: 'FR01'\r\n    }\r\n\r\n    _handleEnvironmentPrepare = async() => {\r\n        store.dispatch(await getFields(this.props.user.email));\r\n        store.dispatch(await getCrops(this.props.user.email));\r\n    }\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this._handleEnvironmentPrepare().then(() => {\r\n            this.setState({busyDeleting: false, busyAdding: false});\r\n        });\r\n    }\r\n\r\n    _handleChangeCropSelection = (evt) => {\r\n        this.setState({selectedCrop: evt.target.value});\r\n    }\r\n\r\n    _handleAddCrop = async(evt) => {\r\n        evt.preventDefault();\r\n        this.setState({busyAdding: true});\r\n        let crop = cropsDetails.filter((crop) => {\r\n            return crop.cropId===this.state.selectedCrop;\r\n        });\r\n        store.dispatch(await addCrop(this.props.user.email, this.state.selectedCrop, crop[0].name));\r\n        window.location.reload();\r\n    }\r\n\r\n    deleteField = async(fieldId) => {\r\n        this.setState({busyDeleting: true});\r\n        store.dispatch(await removeField(fieldId));\r\n        window.location.reload();\r\n    }\r\n\r\n    deleteCrop = async(cropId) => {\r\n        this.setState({busyDeleting: true});\r\n        store.dispatch(await removeCrop(cropId));\r\n        window.location.reload();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"configure-container\">\r\n                <div id=\"fieldsSection\">\r\n                    <label>Fields Section</label>\r\n                    <div className=\"pure-g\">\r\n                        <div className=\"l-box-lrg pure-u-1 pure-u-md-1-2\">\r\n                            Map\r\n                        </div>\r\n                        <div className=\"l-box-lrg pure-u-1 pure-u-md-1-2\">\r\n                            <table className=\"pure-table pure-table-bordered\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Field Id</th>\r\n                                        <th>Field Location</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        this.props.fields.length?this.props.fields.map(field => {\r\n                                            return(\r\n                                                <tr key={field.fieldId}>\r\n                                                    <td>{field.fieldId}</td>\r\n                                                    <td>{field.location.coordinates[0][0][0]}</td>\r\n                                                    <td>{this.state.busyDeleting?<i className=\"fa fa-spin fa-trash-o\" disabled/>:<i onClick={() => this.deleteField(field.fieldId)} className=\"deleteIcon fa fa-trash-o\"/>}</td>\r\n                                                </tr>\r\n                                            )\r\n                                        }):\r\n                                        <tr>\r\n                                            <td colSpan={3}>No fields yet.</td>\r\n                                        </tr>\r\n                                    }\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <section id=\"cropsSection\">\r\n                    <label>Crops Section</label>\r\n                    <div className=\"pure-g\">\r\n                        <div className=\"l-box-lrg pure-u-1 pure-u-md-1-2\">\r\n                            <form className=\"pure-form\" onSubmit={this._handleAddCrop}>\r\n                                <fieldset>\r\n                                    <select id=\"state\" value={this.state.selectedCrop} onChange={this._handleChangeCropSelection}>\r\n                                        {\r\n                                            cropsDetails.map(crop => {\r\n                                                return (\r\n                                                    <option key={crop.cropId} value={crop.cropId}>{crop.name}</option>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </select>\r\n                                    &nbsp;\r\n                                    <button type=\"submit\" className=\"pure-button\">\r\n                                        {this.state.busyAdding?<i className=\"fa fa-spin fa-spinner\" aria-hidden=\"true\"></i>:\"\"}\r\n                                        {this.state.busyAdding?\" Wait\":\"Add\"}\r\n                                    </button>\r\n                                </fieldset>\r\n                            </form>\r\n                        </div>\r\n                        <div className=\"l-box-lrg pure-u-1 pure-u-md-1-2\">\r\n                            <table className=\"pure-table pure-table-bordered\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Crop Id</th>\r\n                                        <th>Crop Name</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        this.props.crops.length?this.props.crops.map(crop => {\r\n                                            return(\r\n                                                <tr key={crop.cropId}>\r\n                                                    <td>{crop.cropId}</td>\r\n                                                    <td>{crop.name}</td>\r\n                                                    <td>{this.state.busyDeleting?<i className=\"fa fa-spin fa-trash-o\" disabled/>:<i onClick={() => this.deleteCrop(crop.cropId)} className=\"deleteIcon fa fa-trash-o\"/>}</td>\r\n                                                </tr>\r\n                                            )\r\n                                        }):\r\n                                        <tr>\r\n                                            <td colSpan={3}>No crops yet.</td>\r\n                                        </tr>\r\n                                    }\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        user: state.user,\r\n        fields: state.fields,\r\n        crops: state.crops,\r\n        last: state.last\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Configure);","import React from 'react';\nimport TaskBar from './components/TaskBar';\nimport Splash from './pages/Splash';\nimport Dashboard from './pages/Dashboard';\nimport Chat from './pages/Chat';\nimport FAQ from './pages/FAQ';\nimport Recovery from './pages/Recovery';\nimport Configure from './pages/Configure';\nimport './App.css';\nimport { Route, HashRouter } from 'react-router-dom';\n\nclass App extends React.Component {\n  render(){\n    return (\n      <>\n        <TaskBar />\n        <HashRouter>\n          <Route exact path=\"/\" render={() => <Splash />}></Route>\n          <Route path=\"/dashboard\" render={() => <Dashboard/>}></Route>\n          <Route path=\"/chat\" render={() => <Chat/>}></Route>\n          <Route path=\"/faq\" render={() => <FAQ/>}></Route>\n          <Route path=\"/recovery\" render={() => <Recovery/>}></Route>\n          <Route path=\"/configure\" render={() => <Configure />}></Route>\n        </HashRouter>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'purecss/build/pure.css';\nimport 'purecss/build/grids-responsive.css';\nimport store from './Store';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { saveState } from './localStorage';\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}