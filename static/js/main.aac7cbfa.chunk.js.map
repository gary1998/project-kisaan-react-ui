{"version":3,"sources":["Store.js","localStorage.js","Reducer.js","Actions.js","components/TaskBar.js","pages/Splash.js","pages/Dashboard.js","pages/Chat.js","pages/FAQ.js","pages/Recovery.js","pages/Configure.js","App.js","serviceWorker.js","index.js"],"names":["enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","state","action","type","alert","user","payload","fields","crops","concat","filter","crop","cropId","serverURL","loginUser","email","password","a","variables","fetch","method","headers","body","stringify","query","then","data","json","login","catch","console","log","getFields","getCrops","newCrop","owner","name","cropResId","resp","createCrop","newField","fieldId","location","fieldResId","createField","deleteField","removeField","deleteCrop","removeCrop","TaskBar","_handleLogout","setItem","dispatch","className","href","alt","src","to","this","props","onClick","React","Component","connect","Splash","busy","_handleLoginSubmit","evt","preventDefault","setState","_handleEmailChange","target","value","_handlePasswordChange","photo","htmlFor","id","readOnly","onSubmit","onChange","placeholder","required","aria-hidden","Dashboard","Chat","FAQ","Recovery","cropsDetails","require","Configure","busyAdding","busyDeleting","selectedCrop","_handleChangeCropSelection","_handleAddCrop","count","addCrop","Promise","resolve","setTimeout","provider","osm","x","y","z","s","String","fromCharCode","wikimedia","dpr","stamen","retrieveCrops","retrieveFields","center","zoom","width","height","map","field","key","coordinates","disabled","colSpan","last","addField","App","exact","path","render","Boolean","hostname","match","subscribe","saveState","getState","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.aac7cbfa.chunk.js","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { reducer } from './Reducer';\r\nimport { loadState } from './localStorage';\r\n\r\nconst composeEnhancers = typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\nconst enhancer = composeEnhancers(\r\n  applyMiddleware(thunk),\r\n);\r\nconst persistedState = loadState() || {};\r\nconst store = createStore(reducer, persistedState, enhancer);\r\n\r\nexport default store;","export const loadState = () => {\r\n    try{\r\n        const serializedState = localStorage.getItem('projectkisaanstate');\r\n        if(serializedState === null){\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch(err){\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport const saveState = (state) => {\r\n    try{\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('projectkisaanstate', serializedState);\r\n    } catch(err){\r\n        console.log(err);\r\n    }\r\n}","export const reducer = (state, action) => {\r\n    switch(action.type) {\r\n        case \"LOGIN_FAILED\": {\r\n            alert('No such user found. Check your email and password again.');\r\n            return {\r\n                ...state,\r\n                user: \"\"\r\n            };\r\n        }\r\n        case \"LOGIN_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                user: action.payload\r\n            }\r\n        }\r\n        case \"LOGOUT\": {\r\n            return {\r\n                ...state,\r\n                user: \"\"\r\n            };\r\n        }\r\n        case \"FIELDS_RETRIEVAL_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                fields: action.payload\r\n            }\r\n        }\r\n        case \"FIELDS_RETRIEVAL_FAILED\": {\r\n            return state;\r\n        }\r\n        case \"CROPS_RETRIEVAL_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                crops: action.payload\r\n            }\r\n        }\r\n        case \"CROPS_RETRIEVAL_FAILED\": {\r\n            return state;\r\n        }\r\n        case \"CROP_ADD_SUCCESS\": {\r\n            let crops = state.crops.concat(action.payload);\r\n            return {\r\n                ...state,\r\n                crops\r\n            }\r\n        }\r\n        case \"CROP_ADD_FAILED\": {\r\n            return state;\r\n        }\r\n        case \"FIELD_REMOVAL_SUCCESS\": {\r\n            let crops = state.crops.filter(crop => {\r\n                return crop.cropId!==action.payload\r\n            });\r\n            return {\r\n                ...state,\r\n                crops\r\n            }\r\n        }\r\n        case \"FIELD_REMOVAL_FAILED\": {\r\n            return state;\r\n        }\r\n        case \"CROP_REMOVAL_SUCCESS\": {\r\n            let crops = state.crops.filter(crop => {\r\n                return crop.cropId!==action.payload\r\n            });\r\n            return {\r\n                ...state,\r\n                crops\r\n            }\r\n        }\r\n        case \"CROP_REMOVAL_FAILED\": {\r\n            return state;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","const serverURL= \"https://project-kisaan-graphql-server.herokuapp.com/graphql\";\r\n\r\nexport const loginUser = async(email, password) => {\r\n    let query = `query login($email: String, $password: String){login(email: $email, password: $password){name photo email}}`;\r\n    let variables = { email, password };\r\n\r\n    return user => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.login){\r\n                user({\r\n                    type: \"LOGIN_SUCCESS\",\r\n                    payload: body.data.login\r\n                });\r\n            } else {\r\n                user({\r\n                    type: \"LOGIN_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            user({\r\n                type: \"LOGIN_FAILED\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const logoutUser = () => {\r\n    return user => {\r\n        user({\r\n            type: \"LOGOUT\",\r\n        })\r\n    }\r\n}\r\n\r\nexport const getFields = async(email) => {\r\n    let query = `query fields($email: String){fields(email: $email){fieldResId fieldId location{coordinates}}}`;\r\n    let variables = { email };\r\n    return fields => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.fields){\r\n                fields({\r\n                    type: \"FIELDS_RETRIEVAL_SUCCESS\",\r\n                    payload: body.data.fields\r\n                });\r\n            } else {\r\n                fields({\r\n                    type: \"FIELDS_RETRIEVAL_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            fields({\r\n                type: \"FIELDS_RETRIEVAL_FAILED\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const getCrops = async(email) => {\r\n    let query = `query crops($email: String){crops(email: $email){cropId name cropResId}}`;\r\n    let variables = { email };\r\n    return crops => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.crops){\r\n                crops({\r\n                    type: \"CROPS_RETRIEVAL_SUCCESS\",\r\n                    payload: body.data.crops\r\n                });\r\n            } else {\r\n                crops({\r\n                    type: \"CROPS_RETRIEVAL_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            crops({\r\n                type: \"CROPS_RETRIEVAL_FAILED\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const newCrop = async(owner, cropId, name) => {\r\n    let query = `mutation addCrop($owner: String, $cropId: String, $cropResId: String, $name: String){createCrop(owner: $owner, cropId: $cropId, name: $name, cropResId: $cropResId){cropResId cropId}}`;\r\n    let cropResId = `${owner}:crops:${cropId}`;\r\n    let variables = { cropId, name, owner, cropResId};\r\n    return resp => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.createCrop.cropId){\r\n                resp({\r\n                    type: \"CROP_ADD_SUCCESS\",\r\n                    payload: {\r\n                        cropId, name\r\n                    }\r\n                });\r\n            } else {\r\n                resp({\r\n                    type: \"CROP_ADD_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            resp({\r\n                type: \"CROP_ADD_FAILED\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const newField = async(owner, fieldId, location) => {\r\n    let query = `mutation addField($owner: String, $fieldId: String, $location: GeoJSONInput, $fieldResId: String){createField(owner: $owner, fieldId: $fieldId, location: $location, fieldResId: $fieldResId){fieldId fieldResId}}`;\r\n    let fieldResId = `${owner}:fields:${fieldId}`;\r\n    let variables = { fieldResId, fieldId, owner, location };\r\n    return resp => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.createField.fieldId){\r\n                resp({\r\n                    type: \"FIELD_ADD_SUCCESS\",\r\n                    payload: body.data.createField.fieldId\r\n                });\r\n            } else {\r\n                resp({\r\n                    type: \"FIELD_ADD_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            resp({\r\n                type: \"FIELD_ADD_FAILED\"\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport const deleteField = async(owner, fieldId) => {\r\n    let query = `mutation deleteField($fieldResId: String){removeField(fieldResId: $fieldResId)}`;\r\n    let fieldResId = `${owner}:fields:${fieldId}`;\r\n    let variables = { fieldResId };\r\n    return resp => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.removeField){\r\n                resp({\r\n                    type: \"FIELD_REMOVAL_SUCCESS\",\r\n                    payload: fieldId\r\n                });\r\n            } else {\r\n                resp({\r\n                    type: \"FIELD_REMOVAL_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n}\r\n\r\nexport const deleteCrop = async(owner, cropId) => {\r\n    let query = `mutation deleteCrop($cropResId: String){removeCrop(cropResId: $cropResId)}`;\r\n    let cropResId = `${owner}:crops:${cropId}`;\r\n    let variables = { cropResId };\r\n    return resp => {\r\n        fetch(serverURL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ query, variables })\r\n        }).then(data => {\r\n            return data.json();\r\n        }).then(body => {\r\n            if(body.data.removeCrop){\r\n                resp({\r\n                    type: \"CROP_REMOVAL_SUCCESS\",\r\n                    payload: cropId\r\n                });\r\n            } else {\r\n                resp({\r\n                    type: \"CROP_REMOVAL_FAILED\"\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n}","import React from 'react';\r\nimport {\r\n  Link,\r\n  HashRouter\r\n} from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport { logoutUser } from '../Actions';\r\nimport store from '../Store';\r\n\r\nclass TaskBar extends React.Component {\r\n\r\n  _handleLogout = () => {\r\n    localStorage.setItem('projectkisaanstate', '');\r\n    store.dispatch(logoutUser());\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <>\r\n        <div className=\"header\">\r\n          <div className=\"home-menu pure-menu pure-menu-horizontal pure-menu-fixed pure-menu-scrollable\">\r\n              <a className=\"pure-menu-heading\" href=\"#\"><img alt=\"Logo\" src=\"img/logo-16.png\"/>&nbsp;<strong>Project Kisaan</strong> - Team EDGE</a>\r\n              <ul className=\"pure-menu-list\">\r\n                <HashRouter>\r\n                  <li className=\"pure-menu-item pure-menu-selected\"><Link to=\"/\" className=\"pure-menu-link\">Home</Link></li>\r\n                  {this.props.user?<><li className=\"pure-menu-item\"><Link to=\"/dashboard\" className=\"pure-menu-link\">Dashboard</Link></li><li className=\"pure-menu-item\"><Link to=\"/chat\" className=\"pure-menu-link\">Chat</Link></li><li className=\"pure-menu-item\"><Link to=\"/configure\" className=\"pure-menu-link\">Configure</Link></li></>:\"\"}\r\n                  <li className=\"pure-menu-item\"><Link to=\"/faq\" className=\"pure-menu-link\">Assistance/FAQs</Link></li>\r\n                </HashRouter>\r\n              </ul>\r\n          </div>\r\n        </div>\r\n          <div className=\"footer l-box is-center\">\r\n            {!this.props.user?<>You're not logged in.</>:<>Welcome {this.props.user.name} ({this.props.user.email}). Click here to <a href=\"#\" onClick={this._handleLogout}>logout</a></>}\r\n          </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n  return {\r\n    user: state.user\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TaskBar);\r\n","import React from 'react';\r\nimport store from '../Store';\r\nimport { loginUser } from '../Actions';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Splash extends React.Component {\r\n    state = {\r\n        email: \"\",\r\n        password: \"\",\r\n        busy: false,\r\n    }\r\n    componentWillReceiveProps(){\r\n        this.setState({busy: false, email: \"\", password: \"\"});\r\n    }\r\n    _handleLoginSubmit = async(evt) => {\r\n        evt.preventDefault();\r\n        this.setState({busy: true});\r\n        store.dispatch(await loginUser(this.state.email, this.state.password));\r\n    }\r\n    _handleEmailChange = (evt) => {\r\n        this.setState({email: evt.target.value});\r\n    }\r\n    _handlePasswordChange = (evt) => {\r\n        this.setState({password: evt.target.value});\r\n    }\r\n    render(){\r\n        return(\r\n            <>\r\n                <div className=\"splash-container\">\r\n                    <div className=\"splash\">\r\n                        <h1 className=\"splash-head\"><img alt=\"Splash\" src=\"img/logo-128.png\"/></h1>\r\n                        <p className=\"splash-subhead\">\r\n                            Project Kisaan - As the name suggests, it's all about Kissan.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"content-wrapper\">\r\n                    <div className=\"content\">\r\n                        <h2 className=\"content-head is-center\">Features</h2>\r\n                        <div className=\"pure-g\">\r\n                            <div className=\"l-box pure-u-1 pure-u-md-1-2 pure-u-lg-1-4\">\r\n                                <h3 className=\"content-subhead\">\r\n                                    <i className=\"fa fa-cogs\"></i>\r\n                                    IoT Based\r\n                                </h3>\r\n                                <p>\r\n                                    AgriBot is a IoT based robot which keeps an eye over your fields and crops and keeps you updated.\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"l-box pure-u-1 pure-u-md-1-2 pure-u-lg-1-4\">\r\n                                <h3 className=\"content-subhead\">\r\n                                    <i className=\"fa fa-users\"></i>\r\n                                    User Friendly\r\n                                </h3>\r\n                                <p>(\r\n                                    The AgriBot and Project Kisaan web application requires almost negligible input which makes it very user friendly.\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"l-box pure-u-1 pure-u-md-1-2 pure-u-lg-1-4\">\r\n                                <h3 className=\"content-subhead\">\r\n                                    <i className=\"fa fa-eye\"></i>\r\n                                    Crop Saviour\r\n                                </h3>\r\n                                <p>\r\n                                    AgriBot comes with a rotatable high-res camera which enables it to detect insects and diseases very accurately.\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"l-box pure-u-1 pure-u-md-1-2 pure-u-lg-1-4\">\r\n                                <h3 className=\"content-subhead\">\r\n                                    <i className=\"fa fa-info\"></i>\r\n                                    Lifetime Assistance\r\n                                </h3>\r\n                                <p>\r\n                                    Project Kisaan team would be very happy to help you anytime anywhere until it's alive.\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <h2 className=\"content-head is-center\">{!this.props.user?\"Login to continue...\":\"More information...\"}</h2>\r\n                        <div className=\"pure-g\">\r\n                            <div className=\"l-box-lrg pure-u-1 pure-u-md-2-5\">\r\n                                {\r\n                                    !this.props.user?\r\n                                    <form className=\"pure-form pure-form-stacked\" onSubmit={this._handleLoginSubmit}>\r\n                                        <fieldset>\r\n                                            <label htmlFor=\"email\">Your Email</label>\r\n                                            <input id=\"email\" type=\"email\" value={this.state.email} onChange={this._handleEmailChange} placeholder=\"mark@example.com\" required/>\r\n                                            <label htmlFor=\"password\">Your Password</label>\r\n                                            <input id=\"password\" type=\"password\" value={this.state.password} onChange={this._handlePasswordChange} placeholder=\"*****\" required/>\r\n                                            <button type=\"submit\" className=\"pure-button\">\r\n                                                {this.state.busy?<i className=\"fa fa-spin fa-spinner\" aria-hidden=\"true\"></i>:\"\"}\r\n                                                {this.state.busy?\" Wait\":\"Login\"}\r\n                                            </button>\r\n                                        </fieldset>\r\n                                        <p>Trouble logging in? <Link to=\"/recovery\">Help</Link></p>\r\n                                    </form>:\r\n                                    <form className=\"pure-form pure-form-stacked\">\r\n                                        <div className=\"avatar-container\">\r\n                                            <img src={this.props.user.photo} className=\"avatar\" alt=\"Avatar\"></img>\r\n                                        </div>\r\n                                        <fieldset>\r\n                                            <label htmlFor=\"email\">Your Email</label>\r\n                                            <input id=\"email\" type=\"email\" value={this.props.user.email} readOnly/>\r\n                                            <label htmlFor=\"name\">Your Name</label>\r\n                                            <input id=\"name\" type=\"text\" value={this.props.user.name} readOnly/>\r\n                                        </fieldset>\r\n                                    </form>\r\n                                }\r\n                            </div>\r\n                            <div className=\"l-box-lrg pure-u-1 pure-u-md-3-5\">\r\n                                <h4>Contact Us</h4>\r\n                                <p>\r\n                                    Our team is there to help you 24x7. You can clear your questions or doubts in our <a href=\"#\">Assistance/FAQs</a> section.\r\n                                    More more information, you can mail us at <a href=\"mailto:help.projectkisaan@mail.com\">help.projectkisaan@mail.com</a>.\r\n                                </p>\r\n                                <h4>Interested in AgriBot?</h4>\r\n                                <p>\r\n                                    You can express your interest for purchasing AgriBot by writing to us at <a href=\"mailto:purchase.projectkisaan@mail.com\">purchase.projectkisaan@mail.com</a>.\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )   \r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n      user: state.user\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Splash);","import React from 'react';\r\n\r\nexport default class Dashboard extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>Dashboard</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Chat extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>Chat</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class FAQ extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>FAQ</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Recovery extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>Recovery</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { getFields, getCrops, newCrop, newField, deleteField, deleteCrop } from '../Actions';\r\nimport { connect } from 'react-redux';\r\nimport Map from 'pigeon-maps';\r\nconst cropsDetails = require('../brain.json');\r\n\r\nclass Configure extends React.Component{\r\n    state = {\r\n        busyAdding: false,\r\n        busyDeleting: false,\r\n        selectedCrop: 'FR01'\r\n    }\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.props.retrieveCrops(this.props.user.email);\r\n        this.props.retrieveFields(this.props.user.email);\r\n    }\r\n\r\n    _handleChangeCropSelection = (evt) => {\r\n        this.setState({selectedCrop: evt.target.value});\r\n    }\r\n\r\n    _handleAddCrop = async(evt) => {\r\n        evt.preventDefault();\r\n        this.setState({busyAdding: true});\r\n        await this.count();\r\n        let crop = cropsDetails.filter((crop) => {\r\n            return crop.cropId===this.state.selectedCrop;\r\n        });\r\n        await this.props.addCrop(this.props.user.email, this.state.selectedCrop, crop[0].name);\r\n        this.setState({busyAdding: false});\r\n    }\r\n\r\n    deleteField = async(fieldId) => {\r\n        this.setState({busyDeleting: true});\r\n        await this.count();\r\n        await this.props.removeField(this.props.user.email, fieldId);\r\n        this.setState({busyDeleting: false});\r\n    }\r\n\r\n    deleteCrop = async(cropId) => {\r\n        this.setState({busyDeleting: true});\r\n        await this.count();\r\n        await this.props.removeCrop(this.props.user.email, cropId);\r\n        this.setState({busyDeleting: false});\r\n    }\r\n\r\n    count = async() => {\r\n        return new Promise(resolve => {\r\n            setTimeout(() => {\r\n                resolve();\r\n            }, 1000);\r\n        })\r\n    }\r\n\r\n    provider = {\r\n        osm: (x, y, z) => {\r\n            const s = String.fromCharCode(97 + (x + y + z) % 3)\r\n            return `https://${s}.tile.openstreetmap.org/${z}/${x}/${y}.png`\r\n        },\r\n        wikimedia: (x, y, z, dpr) => {\r\n            return `https://maps.wikimedia.org/osm-intl/${z}/${x}/${y}${dpr >= 2 ? '@2x' : ''}.png`\r\n        },\r\n        stamen: (x, y, z, dpr) => {\r\n            return `https://stamen-tiles.a.ssl.fastly.net/terrain/${z}/${x}/${y}${dpr >= 2 ? '@2x' : ''}.jpg`\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"configure-container\">\r\n                <div id=\"fieldsSection\">\r\n                    <label>Fields Section</label>\r\n                    <div className=\"pure-g\">\r\n                        <div className=\"l-box-lrg pure-u-1 pure-u-md-1-2 map\">\r\n                            <Map center={[28.946755, 77.726754]} zoom={12} width={600} height={380} provider={this.provider['stamen']} />\r\n                        </div>\r\n                        <div className=\"l-box-lrg pure-u-1 pure-u-md-1-2\">\r\n                            <table className=\"pure-table pure-table-bordered\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Field Id</th>\r\n                                        <th>Field Location</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        this.props.fields?this.props.fields.map(field => {\r\n                                            return(\r\n                                                <tr key={field.fieldResId}>\r\n                                                    <td>{field.fieldId}</td>\r\n                                                    <td>{field.location.coordinates[0][0][0]}</td>\r\n                                                    <td>{this.state.busyDeleting?<i className=\"fa fa-spin fa-trash-o\" disabled/>:<i onClick={() => this.deleteField(field.fieldId)} className=\"deleteIcon fa fa-trash-o\"/>}</td>\r\n                                                </tr>\r\n                                            )\r\n                                        }):\r\n                                        <tr>\r\n                                            <td colSpan={3}>No fields yet.</td>\r\n                                        </tr>\r\n                                    }\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <section id=\"cropsSection\">\r\n                    <label>Crops Section</label>\r\n                    <div className=\"pure-g\">\r\n                        <div className=\"l-box-lrg pure-u-1 pure-u-md-1-2\">\r\n                            <form className=\"pure-form\" onSubmit={this._handleAddCrop}>\r\n                                <fieldset>\r\n                                    <select id=\"state\" value={this.state.selectedCrop} onChange={this._handleChangeCropSelection}>\r\n                                        {\r\n                                            cropsDetails.map(crop => {\r\n                                                return (\r\n                                                    <option key={crop.cropId} value={crop.cropId}>{crop.name}</option>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </select>\r\n                                    &nbsp;\r\n                                    <button type=\"submit\" className=\"pure-button\">\r\n                                        {this.state.busyAdding?<i className=\"fa fa-spin fa-spinner\" aria-hidden=\"true\"></i>:\"\"}\r\n                                        {this.state.busyAdding?\" Wait\":\"Add\"}\r\n                                    </button>\r\n                                </fieldset>\r\n                            </form>\r\n                        </div>\r\n                        <div className=\"l-box-lrg pure-u-1 pure-u-md-1-2\">\r\n                            <table className=\"pure-table pure-table-bordered\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Crop Id</th>\r\n                                        <th>Crop Name</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        this.props.crops?this.props.crops.map(crop => {\r\n                                            return(\r\n                                                <tr key={crop.cropResId}>\r\n                                                    <td>{crop.cropId}</td>\r\n                                                    <td>{crop.name}</td>\r\n                                                    <td>{this.state.busyDeleting?<i className=\"fa fa-spin fa-trash-o\" disabled/>:<i onClick={() => this.deleteCrop(crop.cropId)} className=\"deleteIcon fa fa-trash-o\"/>}</td>\r\n                                                </tr>\r\n                                            )\r\n                                        }):\r\n                                        <tr>\r\n                                            <td colSpan={3}>No crops yet.</td>\r\n                                        </tr>\r\n                                    }\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        user: state.user,\r\n        fields: state.fields,\r\n        crops: state.crops,\r\n        last: state.last\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addCrop: async(owner, cropId, name) => {\r\n            dispatch(await newCrop(owner, cropId, name))\r\n        },\r\n        removeCrop: async(owner, cropId) => {\r\n            dispatch(await deleteCrop(owner, cropId));\r\n        },\r\n        addField: async(fieldId, location, owner) => {\r\n            dispatch(await newField(fieldId, owner, location));\r\n        },\r\n        removeField: async(owner, fieldId) => {\r\n            dispatch(await deleteField(owner, fieldId));\r\n        },\r\n        retrieveCrops: async(email) => {\r\n            dispatch(await getCrops(email));\r\n        },\r\n        retrieveFields: async(email) => {\r\n            dispatch(await getFields(email));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Configure);","import React from 'react';\nimport TaskBar from './components/TaskBar';\nimport Splash from './pages/Splash';\nimport Dashboard from './pages/Dashboard';\nimport Chat from './pages/Chat';\nimport FAQ from './pages/FAQ';\nimport Recovery from './pages/Recovery';\nimport Configure from './pages/Configure';\nimport './App.css';\nimport { Route, HashRouter } from 'react-router-dom';\n\nclass App extends React.Component {\n  render(){\n    return (\n      <>\n        <TaskBar />\n        <HashRouter>\n          <Route exact path=\"/\" render={() => <Splash />}></Route>\n          <Route path=\"/dashboard\" render={() => <Dashboard/>}></Route>\n          <Route path=\"/chat\" render={() => <Chat/>}></Route>\n          <Route path=\"/faq\" render={() => <FAQ/>}></Route>\n          <Route path=\"/recovery\" render={() => <Recovery/>}></Route>\n          <Route path=\"/configure\" render={() => <Configure />}></Route>\n        </HashRouter>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'purecss/build/pure.css';\nimport 'purecss/build/grids-responsive.css';\nimport store from './Store';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { saveState } from './localStorage';\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}